{"@context":"http://schema.org","@type":"CreativeWork","name":"Creating your first API with API Platform, in 5 minutes","text":"\u003ch1\u003eCreating your first API with API Platform, in 5 minutes\u003c/h1\u003e\n\n\u003cp\u003eIn this tutorial, we will create a typical blog application with API Platform.\nAnd it will take us less than 5 minutes to create the API, promised!\u003c/p\u003e\n\n\u003cp\u003eAll sources created during this tutorial are available on GitHub:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ethe blog API : \u003ca href=\"https://api-platform-demo-blog-api.herokuapp.com\"\u003edemo\u003c/a\u003e (we recommend to browse it with \u003ca href=\"http://getpostman.com\"\u003ePostman\u003c/a\u003e)\n/ \u003ca href=\"https://github.com/dunglas/blog-api\"\u003esources\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ethe Angular client: \u003ca href=\"https://dunglas.github.io/blog-client/\"\u003edemo\u003c/a\u003e / \u003ca href=\"https://github.com/dunglas/blog-client\"\u003esources\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cimg src=\"images/blog-api-platform.png\" alt=\"Screenshot of the blog\"/\u003e\u003c/p\u003e\n\n\u003cp\u003eTo create the API-side of our project we will:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eBootstrap a fully featured and working data model including ORM mapping, validation rules and semantic metadata with the\ngenerator provided by API platform (of course you can also handcraft your data model or modify the generated one to fit\nyour needs).\u003c/li\u003e\n\u003cli\u003eExpose this data model trough a read/write (CRUD) web API having a ton of features out of the box: hypermedia, pagination,\nvalidation, filtering, sorting… ; supporting \u003ca href=\"http://json-ld.org\"\u003eJSON-LD\u003c/a\u003e, \u003ca href=\"https://schema.org\"\u003eSchema.org\u003c/a\u003e and \u003ca href=\"http://www.hydra-cg.com/\"\u003eHydra\u003c/a\u003e\nopen standards and being easily extensible thanks to strong \u003ca href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\"\u003eOOP\u003c/a\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn \u003ca href=\"angularjs.jsonld\"\u003ea second part\u003c/a\u003e, we will develop a tiny AngularJS webapp to illustrate how to create and consume data from the API. Keep\nin mind that you can use your preferred client-side technology (tested and approved with Angular, React, Ionic, Swift but\ncan work with any language able to send HTTP requests).\u003c/p\u003e\n\n\u003ch2\u003ePrerequisites\u003c/h2\u003e\n\n\u003cp\u003ePHP 7 must be installed to run API Platform. A built-in web server is shipped with the framework for the development environment.\u003c/p\u003e\n\n\u003cp\u003eTo follow this tutorial a database must be installed (but its not a strong dependency of the framework). We recommend MySQL\nor MariaDB but other major DBMS are supported including PostgreSQL and SQLite.\u003c/p\u003e\n\n\u003ch2\u003eInstalling the framework\u003c/h2\u003e\n\n\u003cp\u003eLet’s start our new blog API project. The easiest way to create a new project is to use \u003ca href=\"https://getcomposer.org/\"\u003eComposer\u003c/a\u003e\n(you need to have it installed on your box):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003ecomposer create-project api-platform/api-platform:dev-master blog-api\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eComposer creates the skeleton of the new blog API then retrieve the framework and all its dependencies.\u003c/p\u003e\n\n\u003cp\u003eAt the end of the installation, you will be prompted for some configuration parameters including database credentials.\nAll configuration parameters can be changed later by editing the \u003ccode\u003eapp/config/parameters.yml\u003c/code\u003e file.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform is pre-configured to use the popular and powerful \u003ca href=\"http://www.doctrine-project.org/projects/orm.html\"\u003eDoctrine ORM\u003c/a\u003e.\nIt’s supported natively by all API Platform components. However the Doctrine ORM is fully optional: you can replace it\nby your favorite ORM, no ORM at all and even no database.\u003c/p\u003e\n\n\u003cp\u003eThe installer will also ask you for some configuration parameters:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edatabase_*\u003c/code\u003e: database credentials (MySQL is configured by default, but other popular RDBMS are supported)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emailer_*\u003c/code\u003e: mail server credentials (to send mails)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecors_allow_origin\u003c/code\u003e: the URL of your default web client application to automatically set appropriate \u003ca href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\u003eCORS\u003c/a\u003e\nheaders, \u003cstrong\u003eset it to \u003ccode\u003ehttp://locahost:9000\u003c/code\u003e (the default URL of the built-in Grunt server of our AngularJS client) to follow this tutorial\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eapi_*\u003c/code\u003e: a name and a description of the API that will be used in the generated documentation\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esecret\u003c/code\u003e: a secret token (choose a long one) for cryptographic features\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFinally, the installer will ask if you want to remove the existing VCS history, type \u003ccode\u003eY\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eTake a look at \u003ca href=\"https://github.com/dunglas/blog-api\"\u003ethe content of the generated directory\u003c/a\u003e. You maybe recognize a \u003ca href=\"https://symfony.com/doc/current/quick_tour/the_architecture.html\"\u003eSymfony\napplication directory structure\u003c/a\u003e. It’s fine and intended:\n\u003cstrong\u003ethe generated skeleton is a perfectly valid Symfony full-stack application\u003c/strong\u003e that follows \u003ca href=\"https://symfony.com/doc/current/best_practices/index.html\"\u003eSymfony Best Practices\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt means that with this default API Platform setup, you can:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://knpbundles.com\"\u003euse thousands of exiting Symfony bundles\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003ereuse all your Symfony skills and benefit of the high quality \u003ca href=\"https://symfony.com/doc/current/index.html\"\u003eSymfony documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eYou can also use API Platform in any existing Symfony application.\u003c/p\u003e\n\n\u003cp\u003eWhile API Platform is perfectly integrated with Symfony, keep in mind that it’s basically a set of standalone PHP components.\nYou can also use those components in raw PHP (without framework) as well as with other frameworks.\u003c/p\u003e\n\n\u003cp\u003eThe skeleton comes with a demonstration bookstore API. You can play with it by running the following commands:\u003c/p\u003e\n\n\u003cp\u003eCreate the database:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ bin/console doctrine:database:create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCreate the database schema:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ bin/console doctrine:schema:create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRun the built-in web server:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ bin/console server:start\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou can open \u003ccode\u003ehttp://localhost:8000\u003c/code\u003e with you preferred REST client.\nWe recommend \u003ca href=\"https://www.getpostman.com\"\u003ePostman\u003c/a\u003e, and you will see later that API Platform is nicely integrated with it.\u003c/p\u003e\n\n\u003cp\u003eWhen you’re done with the demo app and want to create your own API:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eempty the \u003ccode\u003eapp/config/schema.yml\u003c/code\u003e file\u003c/li\u003e\n\u003cli\u003edelete all PHP files in the \u003ccode\u003esrc/AppBundle/Entity/\u003c/code\u003e directory\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eGenerating the data model\u003c/h2\u003e\n\n\u003cp\u003eThe first incredibly useful tool provided by API platform is \u003ca href=\"../schema-generator/index.jsonld\"\u003eits data model generator\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt is 100% independent of other components but fits well with them: you can use this generator to scaffold the data model\nof any PHP application. But you can also expose any hand-crafted PHP data model with the API system.\n\u003cstrong\u003eThose components are not coupled together.\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eTo scaffold our blog data model we’ll browse \u003ca href=\"https://schema.org\"\u003eSchema.org\u003c/a\u003e and find types matching our needs.\nWe’re lucky, the \u003ca href=\"https://schema.org/BlogPosting\"\u003ehttps://schema.org/BlogPosting\u003c/a\u003e describes exactly the data model we want\nfor our blog. As you can see, there is a bunch of schemas available.\u003c/p\u003e\n\n\u003cp\u003eReport types you’re interested in a YAML configuration file like in the following snippet:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/schema.yml\n \ntypes:                      # The list of type to generated (a PHP entity class by type will be generated)\n  BlogPosting:\n    parent: false           # It\u0026#39;s a best practice to have entity without parents\n    properties:             # The list of properties we want to use\n      name: ~               # You can include properties from the current type and of all these parents\n      articleBody: ~\n      articleSection: ~\n      headline: ~\n      isFamilyFriendly: ~\n      datePublished: ~\n      author:\n        range: Person       # You can specify relations, here we force the type of the property to Person\n        cardinality: (*..0) # We also the cardinality of the relation\n      kevinReview:          # You can also define custom properties, not available in Schema.org\n        range: Text         # For custom properties, type must always be specified\n        cardinality: (*..0) # Using the cardinality here (not a relation) allows to deal with the nullable option\n  Person:                   # Person is a relation of the BlogPosting type (author property), relations will be automatically generated\n    parent: false\n    properties:\n      familyName: ~         # We add some common properties defined by Schema.org\n      givenName: ~\n      description: ~\n      birthDate: ~\n      deathDate: ~\n\nnamespaces:\n  entity: AppBundle\\Entity # The default namespace for entities, following API Platform and Symfony best practices\n\nannotationGenerators: # Enabled generators\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator          # PHPDoc\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\DoctrineOrmAnnotationGenerator     # Doctrine ORM mapping\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\ConstraintAnnotationGenerator      # Symfony Validation Constraints\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\ApiPlatformCoreAnnotationGenerator # API Platform resource mapping\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003etypes\u003c/code\u003e key contains the list of classes we want to generate. Each class will be generated from the corresponding\nSchema.org type.\u003c/p\u003e\n\n\u003cp\u003eReport properties of the class you want to generate in the \u003ccode\u003eproperties\u003c/code\u003e key of the type. Similarly PHP properties are\ngenerated using properties coming from Schema.org. If the value of the \u003ccode\u003eproperties\u003c/code\u003e key is null (\u003ccode\u003e~\u003c/code\u003e), all properties\nof the Schema.org type will be generated.\nAs you can see with \u003ccode\u003ekevinReview\u003c/code\u003e, it’s also possible to define custom properties.\u003c/p\u003e\n\n\u003cp\u003eThe schema generator is smart enough to guess types (\u003ccode\u003erange\u003c/code\u003e in the Schema.org terminology) and cardinalities of properties.\nUse the \u003ccode\u003erange\u003c/code\u003e and \u003ccode\u003ecardinality\u003c/code\u003e keys if you want to override those values.\u003c/p\u003e\n\n\u003cp\u003eThe \u003ccode\u003enamespaces\u003c/code\u003e key contain the namespace where generates entities belong. The generator is also able to generate enums,\ninterfaces and abstract class. Here we use the default Symfony directory for entities.\u003c/p\u003e\n\n\u003cp\u003eFinally, the \u003ccode\u003eannotationGenerators\u003c/code\u003e key contains the list of annotation generators we want to register. With those settings\nit will generate the PHPDoc, Doctrine ORM mappings, Symfony Validation annotations and API Platform annotations.\nThe last one is only useful to generate Schema.org IRI when exposing the API instead of custom ones. If you don’t want to\nexpose a Schema.org enabled API, you can remove this generator. You can also create you own annotation generators and register them in this configuration section.\u003c/p\u003e\n\n\u003cp\u003eIf you don’t find types or properties matching your specific needs, it’s not a big deal. You can create entity classes\nby yourself (directly in PHP) and still benefit from the bunch of other API Platform features.\nYou can also pick some classes and properties from Schema.org then add more custom types to your model.\u003c/p\u003e\n\n\u003cp\u003eIt’s time to run the model generator:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ vendor/bin/schema generate-types src/ app/config/schema.yml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eTake a look at the content of the \u003ca href=\"https://github.com/dunglas/blog-api/tree/master/src/AppBundle/Entity\"\u003esrc/AppBundle/Entity/\u003c/a\u003e directory.\nWe generated a set of Plain-Old-PHP entities representing our data model. As promised we generated:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eA set of PHP entities with properties, constants (enum values), getters, setters, adders and removers. The class hierarchy\nprovided by Schema.org is translated to a PHP class hierarchy with parents as \u003ccode\u003eabstract\u003c/code\u003e classes. The generated code\ncomplies with \u003ca href=\"http://www.php-fig.org/\"\u003ePSR\u003c/a\u003e coding standards.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://doctrine-orm.readthedocs.org/projects/doctrine-orm/en/latest/reference/annotations-reference.html\"\u003eDoctrine ORM mapping annotations\u003c/a\u003e\nincluding database columns with type guessing, relations with cardinality guessing and class inheritance (through the\n\u003ccode\u003e@AbstractSuperclass\u003c/code\u003e annotation).\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://symfony.com/doc/current/book/validation.html#constraints\"\u003eSymfony validation annotations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eAPI Platform \u003ccode\u003e@ApiResource\u003c/code\u003e and \u003ccode\u003e@ApiProperty\u003c/code\u003e annotations\u003c/li\u003e\n\u003cli\u003eFull high-quality \u003ca href=\"https://www.phpdoc.org\"\u003ePHPDoc\u003c/a\u003e for classes, properties, constants and methods extracted from Schema.org\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe data model is fully functional. You can hack it (modify entities, properties, indexes, validation rules…), or use it\nas is!\u003c/p\u003e\n\n\u003cp\u003eReusing an existing semantic schema like we’ve done has many advantages:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eDon’t Reinvent The Wheel\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eData models provided by Schema.org are popular and have been proved efficient. They cover a broad spectrum of topics including\ncreative work, e-commerce, event, medicine, social networking, people, postal address, organization, place or review. Schema.org\nhas its root in \u003ca href=\"http://schema.rdfs.org/mappings.html\"\u003ea ton of preexisting well designed vocabularies\u003c/a\u003e and is successfully\nused by more and more website and applications.\u003c/p\u003e\n\n\u003cp\u003ePick up schemas applicable to your application, generate your PHP model, then customize and specialize it to fit your needs.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eImprove SEO and user experience\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eAdding Schema.org markup to websites and apps increase their ranking in search engines results and enable awesome features\nsuch as \u003ca href=\"https://support.google.com/webmasters/answer/99170?hl=en\"\u003eGoogle Rich Snippets\u003c/a\u003e and \u003ca href=\"https://developers.google.com/gmail/markup/overview\"\u003eGmail markup\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eMapping your app data model to Schema.org structures can be a tedious task. Using the generator, your data model will be\na derived from Schema.org. Serializing your data as JSON-LD will not require specific mapping nor adaptation. It’s a matter\nof minutes.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eReady for the future\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eSchema.org improves the interoperability of your applications. Used with hypermedia technologies such as \u003ca href=\"http://www.hydra-cg.com/\"\u003eHydra\u003c/a\u003e\nit’s a big step towards the semantic and machine readable web. It opens the way to generic web API clients able to extract\nand process data from any website or app using such technologies.\u003c/p\u003e\n\n\u003cp\u003eAsk Doctrine to create the database of the project:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ bin/console doctrine:database:drop --force # Just in case you created the DB to play with the bookstore app, be careful with this command it deletes data permanently\n$ bin/console doctrine:database:create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen generate database tables related to the generated entities:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ bin/console doctrine:schema:create\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe schema generator provides a lot of configuration options. Take a look at \u003ca href=\"../schema-generator/index.jsonld\"\u003eits dedicated documentation\u003c/a\u003e.\nKeep in mind that it is also available as a standalone tool (PHAR) and can be used to bootstrap any PHP project (works fine\nwith raw PHP, API Platform and Symfony but also has an extension mechanism allowing to use it with other technologies.\u003c/p\u003e\n\n\u003cp\u003eYou can always create your very own data model from scratch. It’s perfectly OK and you can still use API Platform without\nthe generator.\u003c/p\u003e\n\n\u003cp\u003eSometimes we will have to make a data model with very specific business types, not available in Schema.org. Sometimes we\nwill find Schema.org types that partially matches what we want but needs to be adapted.\u003c/p\u003e\n\n\u003cp\u003eAnyway, the schema generator is a tool intended \u003cstrong\u003eto bootstrap\u003c/strong\u003e the data model. You can and \u003cstrong\u003eyou will\u003c/strong\u003e edit manually\ngenerated PHP entities. When you start to edit manually the generated files, be careful to not run the generator again,\nit will overwrite your changes (this behavior will be enhanced in future versions). When you do such things, the best to\ndo is to remove \u003ccode\u003eapi-platform/schema-generator\u003c/code\u003e from your \u003ccode\u003ecomposer.json\u003c/code\u003e file.\u003c/p\u003e\n\n\u003ch2\u003eExposing the API\u003c/h2\u003e\n\n\u003cp\u003eWe have a working data model backed by a database. But we also got a working hypermedia REST API thanks to \u003cstrong\u003e\u003ca href=\"../core/index.jsonld\"\u003eAPI Platform Core\u003c/a\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe core, like the schema generator, is already pre-installed and properly configured.\nWe just need to mark resources we want to expose with an \u003ccode\u003e@ApiResource\u003c/code\u003e annotation. Open any of the generated entities, and\nyou’ll see that the schema generator already added this annotation for us.\u003c/p\u003e\n\n\u003cp\u003eAnd our API is already finished! How would it be easier?\u003c/p\u003e\n\n\u003cp\u003eWhen you create new entities, you need to clear the cache:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ bin/console cache:clear\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eStart the integrated development web server:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ bin/console server:start\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen open \u003ccode\u003ehttp://localhost:8000/doc\u003c/code\u003e with a web browser:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/api-doc.png\" alt=\"API doc\"/\u003e]\u003c/p\u003e\n\n\u003cp\u003eThanks to \u003ca href=\"https://github.com/nelmio/NelmioApiDocBundle\"\u003eNelmioApiDocBundle\u003c/a\u003e support of ApiBundle and its integration\nwith API Platform, you get for a free \u003cstrong\u003ean automatically generated human-readable documentation\u003c/strong\u003e of the API (Swagger-like).\nThe doc also \u003cstrong\u003eincludes a sandbox\u003c/strong\u003e to try the API.\u003c/p\u003e\n\n\u003cp\u003eYou can also use your favorite HTTP client (yeah, we already talked about Postman) to query the API.\nIt is lower level than the sandbox and will allow to inspect forge and inspect JSON requests and responses easily.\u003c/p\u003e\n\n\u003cp\u003eOpen \u003ccode\u003ehttp://localhost:8000\u003c/code\u003e with Postman. This URL is the entry point of the API. It gives to access to all exposed\nresources. As you can see, the API returns minified JSON-LD. For better readability, JSON snippets have been prettified\nin this document.\u003c/p\u003e\n\n\u003cp\u003eIf you want to expose any entity:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003ePut it in the \u003ccode\u003eEntity\u003c/code\u003e directory of a bundle\u003c/li\u003e\n\u003cli\u003eMark it with the \u003ccode\u003e@ApiPlatform\\Core\\Annotation\\ApiResource\u003c/code\u003e annotation\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIt’s as easy as it looks.\u003c/p\u003e\n\n\u003ch2\u003eTrying the API\u003c/h2\u003e\n\n\u003cp\u003eAdd a person named Olivier Lenancker by issuing a POST request on \u003ccode\u003ehttp://localhost:8000/people\u003c/code\u003e with the following JSON document as\nraw body:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;familyName\u0026#34;: \u0026#34;Lenancker\u0026#34;,\n  \u0026#34;givenName\u0026#34;: \u0026#34;Olivier\u0026#34;,\n  \u0026#34;description\u0026#34;: \u0026#34;A famous author from the North.\u0026#34;,\n  \u0026#34;birthDate\u0026#34;: \u0026#34;666-06-06\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAs you can see, we omitted some optional properties such as \u003ccode\u003edescription\u003c/code\u003e and \u003ccode\u003edeathDate\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe data is inserted in database. The server replies with a JSON-LD representation of the freshly created resource.\nThanks to the schema generator, the \u003ccode\u003e@type\u003c/code\u003e property of the JSON-LD document is referencing a Schema.org type:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n  \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n  \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n  \u0026#34;birthDate\u0026#34;: \u0026#34;0666-06-06T00:00:00+00:00\u0026#34;,\n  \u0026#34;deathDate\u0026#34;: null,\n  \u0026#34;description\u0026#34;: \u0026#34;A famous author from the North.\u0026#34;,\n  \u0026#34;familyName\u0026#34;: \u0026#34;Lenancker\u0026#34;,\n  \u0026#34;givenName\u0026#34;: \u0026#34;Olivier\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe JSON-LD spec is fully supported by API Platform. Want a proof? Browse \u003ccode\u003ehttp://localhost:8000/contexts/Person\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBy default, the API allows \u003ccode\u003eGET\u003c/code\u003e (retrieve, on collections and items), \u003ccode\u003ePOST\u003c/code\u003e (create), \u003ccode\u003ePUT\u003c/code\u003e (update) and \u003ccode\u003eDELETE\u003c/code\u003e (self-explaining)\nHTTP methods. \u003ca href=\"../core/operations.jsonld\"\u003eYou can add and remove any other operation you want\u003c/a\u003e.\nTry it!\u003c/p\u003e\n\n\u003cp\u003eNow, browse \u003ccode\u003ehttp://localhost:8000/people\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n  \u0026#34;@id\u0026#34;: \u0026#34;/people\u0026#34;,\n  \u0026#34;@type\u0026#34;: \u0026#34;hydra:Collection\u0026#34;,\n  \u0026#34;hydra:member\u0026#34;: [\n    {\n      \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n      \u0026#34;birthDate\u0026#34;: \u0026#34;0666-06-06T00:00:00+00:00\u0026#34;,\n      \u0026#34;deathDate\u0026#34;: null,\n      \u0026#34;description\u0026#34;: \u0026#34;A famous author from the North.\u0026#34;,\n      \u0026#34;familyName\u0026#34;: \u0026#34;Lenancker\u0026#34;,\n      \u0026#34;givenName\u0026#34;: \u0026#34;Olivier\u0026#34;\n    }\n  ],\n  \u0026#34;hydra:totalItems\u0026#34;: 1\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePagination is also supported (and enabled) out of the box.\u003c/p\u003e\n\n\u003cp\u003eIt’s time to post our first article. Run a POST request on \u003ccode\u003ehttp://locahost:8000/blog_postings\u003c/code\u003e with the following JSON document\nas body:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n  \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll love that framework!\u0026#34;,\n  \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n  \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n  \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n  \u0026#34;isFamilyFriendly\u0026#34;: \u0026#34;maybe\u0026#34;,\n  \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;,\n  \u0026#34;kevinReview\u0026#34;: \u0026#34;nice\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOops… the \u003ccode\u003eisFamilyFriendly\u003c/code\u003e property is a boolean. Our JSON contains an incorrect type value (a \u003ccode\u003estring\u003c/code\u003e).\nFortunately API Platform is smart enough to detect the error: it uses Symfony validation constraints generated previously.\nIt returns a detailed error message in the Hydra error serialization format:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;@context\u0026#34;: \u0026#34;/contexts/ConstraintViolationList\u0026#34;,\n  \u0026#34;@type\u0026#34;: \u0026#34;ConstraintViolationList\u0026#34;,\n  \u0026#34;hydra:title\u0026#34;: \u0026#34;An error occurred\u0026#34;,\n  \u0026#34;hydra:description\u0026#34;: \u0026#34;isFamilyFriendly: This value should be of type boolean.\u0026#34;,\n  \u0026#34;violations\u0026#34;: [\n    {\n      \u0026#34;propertyPath\u0026#34;: \u0026#34;isFamilyFriendly\u0026#34;,\n      \u0026#34;message\u0026#34;: \u0026#34;This value should be of type boolean.\u0026#34;\n    }\n  ]\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eCorrect the body and send the request again:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n  \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll love that framework!\u0026#34;,\n  \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n  \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n  \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n  \u0026#34;isFamilyFriendly\u0026#34;: true,\n  \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;,\n  \u0026#34;kevinReview\u0026#34;: \u0026#34;nice\u0026#34;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWe fixed it! By the way you learned how to work with relations. In a hypermedia API, every resource is identified with\nan unique IRI (an URL is an IRI). They are in the \u003ccode\u003e@id\u003c/code\u003e property of every JSON-LD document generated by the API and you\ncan use it as reference to set relations like we done in the previous snippet for the author property.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform is smart enough to understand \u003ca href=\"http://php.net/manual/en/datetime.formats.date.php\"\u003eany date format supported by PHP\u003c/a\u003e\ndate functions. In production we recommend the format specified by the \u003ca href=\"http://tools.ietf.org/html/rfc3339\"\u003eRFC 3339\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWe already have a powerful hypermedia REST API (always without writing a single line of PHP), but there is more.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eOur API is auto-discoverable\u003c/strong\u003e. Open \u003ccode\u003ehttp://localhost:8000/apidoc\u003c/code\u003e and take a look at the content. Capabilities of the\nAPI are fully described in a machine-readable format: available resources, properties and operations, description of elements,\nreadable and writable properties, types returned and expected…\u003c/p\u003e\n\n\u003cp\u003eAs for errors, the whole API is described using \u003ca href=\"http://www.w3.org/ns/hydra/spec/latest/core/\"\u003ethe Hydra Core Vocabulary\u003c/a\u003e,\nan open web standard for describing hypermedia REST APIs in JSON-LD. Any Hydra-compliant client or library is able to interact\nwith the API without knowing anything about it! The most popular Hydra client is \u003ca href=\"http://www.markus-lanthaler.com/hydra/console/\"\u003eHydra Console\u003c/a\u003e.\nOpen an URL of the API with it you’ll get a nice management interface.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/console.png\" alt=\"Hydra console\"/\u003e]\u003c/p\u003e\n\n\u003cp\u003eYou can also give a try to the \u003ca href=\"https://github.com/bergos/hydra-core\"\u003ehydra-core Javascript library\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform offers a lot of other features including:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../core/filters.jsonld\"\u003efilters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../core/serialization-groups-and-relations.jsonld\"\u003eserialization groups and child resource embedding\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../core/data-providers.jsonld\"\u003edata providers\u003c/a\u003e: retrieve and modify data trough a web-service or a MongoDB database or anything\nelse instead of Doctrine ORM\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../core/operations.jsonld\"\u003ecustom operations\u003c/a\u003e: deactivate some methods, create custom operations, URL and controllers\u003c/li\u003e\n\u003cli\u003ea powerful \u003ca href=\"../core/the-event-system.jsonld\"\u003eevent system\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eRead \u003ca href=\"../core/index.jsonld\"\u003eits dedicated documentation\u003c/a\u003e to see how to leverage them and how to\nhook your own code everywhere into it.\u003c/p\u003e\n\n\u003ch2\u003eSpecifying and testing the API\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://docs.behat.org/\"\u003eBehat\u003c/a\u003e (a \u003ca href=\"http://en.wikipedia.org/wiki/Behavior-driven_development\"\u003eBehavior-driven development\u003c/a\u003e\nframework) is pre-configured with contexts useful to spec and test REST API and JSON documents.\u003c/p\u003e\n\n\u003cp\u003eWith Behat, you can write the API specification (as user stories) in natural language then execute scenarios against the\napplication to validate its behavior.\u003c/p\u003e\n\n\u003cp\u003eCreate a \u003ca href=\"http://docs.behat.org/en/latest/guides/1.gherkin.html\"\u003eGherkin\u003c/a\u003e feature file containing the scenarios we run manually\nin the previous chapter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-gherkin\"\u003e# features/blog.feature\n\nFeature: Blog\n  In order to post news\n  As a client software developer\n  I need to be able to retrieve, create, update and delete authors and posts trough the API.\n\n  # \u0026#34;@createSchema\u0026#34; creates a temporary SQLite database for testing the API\n  @createSchema\n  Scenario: Create a person\n    When I send a \u0026#34;POST\u0026#34; request to \u0026#34;/people\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;familyName\u0026#34;: \u0026#34;Lenancker\u0026#34;,\n      \u0026#34;givenName\u0026#34;: \u0026#34;Olivier\u0026#34;,\n      \u0026#34;description\u0026#34;: \u0026#34;A famous author from the North.\u0026#34;,\n      \u0026#34;birthDate\u0026#34;: \u0026#34;666-06-06\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 201\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n      \u0026#34;birthDate\u0026#34;: \u0026#34;0666-06-06T00:00:00+00:00\u0026#34;,\n      \u0026#34;deathDate\u0026#34;: null,\n      \u0026#34;description\u0026#34;: \u0026#34;A famous author from the North.\u0026#34;,\n      \u0026#34;familyName\u0026#34;: \u0026#34;Lenancker\u0026#34;,\n      \u0026#34;givenName\u0026#34;: \u0026#34;Olivier\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  Scenario: Retrieve the user list\n    When I send a \u0026#34;GET\u0026#34; request to \u0026#34;/people\u0026#34;\n    Then the response status code should be 200\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/Person\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/people\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;hydra:Collection\u0026#34;,\n      \u0026#34;hydra:member\u0026#34;: [\n        {\n          \u0026#34;@id\u0026#34;: \u0026#34;/people/1\u0026#34;,\n          \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/Person\u0026#34;,\n          \u0026#34;birthDate\u0026#34;: \u0026#34;0666-06-06T00:00:00+00:00\u0026#34;,\n          \u0026#34;deathDate\u0026#34;: null,\n          \u0026#34;description\u0026#34;: \u0026#34;A famous author from the North.\u0026#34;,\n          \u0026#34;familyName\u0026#34;: \u0026#34;Lenancker\u0026#34;,\n          \u0026#34;givenName\u0026#34;: \u0026#34;Olivier\u0026#34;\n        }\n      ],\n      \u0026#34;hydra:totalItems\u0026#34;: 1\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  Scenario: Throw errors when a post is invalid\n    When I send a \u0026#34;POST\u0026#34; request to \u0026#34;/blog_postings\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n      \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll love that framework!\u0026#34;,\n      \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n      \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n      \u0026#34;isFamilyFriendly\u0026#34;: \u0026#34;maybe\u0026#34;,\n      \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;,\n      \u0026#34;kevinReview\u0026#34;: \u0026#34;nice\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 400\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/ConstraintViolationList\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;ConstraintViolationList\u0026#34;,\n      \u0026#34;hydra:title\u0026#34;: \u0026#34;An error occurred\u0026#34;,\n      \u0026#34;hydra:description\u0026#34;: \u0026#34;isFamilyFriendly: This value should be of type boolean.\u0026#34;,\n      \u0026#34;violations\u0026#34;: [\n        {\n          \u0026#34;propertyPath\u0026#34;: \u0026#34;isFamilyFriendly\u0026#34;,\n          \u0026#34;message\u0026#34;: \u0026#34;This value should be of type boolean.\u0026#34;\n        }\n      ]\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\n  # \u0026#34;@dropSchema\u0026#34; is mandatory to cleanup the temporary database on the last scenario\n  @dropSchema\n  Scenario: Post a new blog post\n    When I send a \u0026#34;POST\u0026#34; request to \u0026#34;/blog_postings\u0026#34; with body:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n      \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll love that framework!\u0026#34;,\n      \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n      \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n      \u0026#34;isFamilyFriendly\u0026#34;: true,\n      \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11\u0026#34;,\n      \u0026#34;kevinReview\u0026#34;: \u0026#34;nice\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n    Then the response status code should be 201\n    And the response should be in JSON\n    And the header \u0026#34;Content-Type\u0026#34; should be equal to \u0026#34;application/ld+json\u0026#34;\n    And the JSON should be equal to:\n    \u0026#34;\u0026#34;\u0026#34;\n    {\n      \u0026#34;@context\u0026#34;: \u0026#34;/contexts/BlogPosting\u0026#34;,\n      \u0026#34;@id\u0026#34;: \u0026#34;/blog_postings/1\u0026#34;,\n      \u0026#34;@type\u0026#34;: \u0026#34;http://schema.org/BlogPosting\u0026#34;,\n      \u0026#34;articleBody\u0026#34;: \u0026#34;The body of my article.\u0026#34;,\n      \u0026#34;articleSection\u0026#34;: \u0026#34;technology\u0026#34;,\n      \u0026#34;author\u0026#34;: \u0026#34;/people/1\u0026#34;,\n      \u0026#34;datePublished\u0026#34;: \u0026#34;2015-05-11T00:00:00+00:00\u0026#34;,\n      \u0026#34;headline\u0026#34;: \u0026#34;You\u0026#39;ll love that framework!\u0026#34;,\n      \u0026#34;isFamilyFriendly\u0026#34;: true,\n      \u0026#34;name\u0026#34;: \u0026#34;API Platform is great\u0026#34;,\n      \u0026#34;kevinReview\u0026#34;: \u0026#34;nice\u0026#34;\n    }\n    \u0026#34;\u0026#34;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe API Platform flavor of Behat also comes with a temporary SQLite database dedicated to tests. It works out of the box.\u003c/p\u003e\n\n\u003cp\u003eSimply run \u003ccode\u003evendor/bin/behat\u003c/code\u003e. Everything should be green:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e4 scenarios (4 passed)\n21 steps (21 passed)\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen you get a powerful hypermedia API exposing structured data, specified and tested thanks to Behat. And still without\na line of PHP!\u003c/p\u003e\n\n\u003cp\u003eIt’s incredibly useful for prototyping and Rapid Application Development (RAD). But the framework is designed to run in prod.\nIt benefits from \u003cstrong\u003estrong extension points\u003c/strong\u003e and is \u003cstrong\u003ehas been optimized for very high-traffic websites\u003c/strong\u003e (API Platform\npowers the new version of a major world-wide media site).\u003c/p\u003e\n\n\u003ch2\u003eOther features\u003c/h2\u003e\n\n\u003cp\u003eAPI Platform has a lot of other features and can extended with PHP libraries and Symfony bundles. \u003ca href=\"https://twitter.com/ApiPlatform\"\u003eStay tuned\u003c/a\u003e,\nmore documentation and cookbooks are coming!\u003c/p\u003e\n\n\u003cp\u003eHere is a non exhaustive list of what you can do with API Platform:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAdd \u003ca href=\"../core/fosuser-bundle.jsonld\"\u003ea user management system\u003c/a\u003e\n(FOSUser integration)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/lexik/LexikJWTAuthenticationBundle\"\u003eSecure the API with JWT\u003c/a\u003e (LexikJwtAuthenticationBundle) or \u003ca href=\"https://github.com/FriendsOfSymfony/FOSOAuthServerBundle\"\u003eOAuth\u003c/a\u003e\n(FosOAuthServer)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://foshttpcachebundle.readthedocs.org\"\u003eAdd a Varnish reverse proxy and adopt a expiration or invalidation HTTP cache strategy\u003c/a\u003e\n(FosHttpCache)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/dunglas/DunglasAngularCsrfBundle\"\u003eAdd CSRF protection when the API authentication relies on cookies\u003c/a\u003e\n(DunglasAngularCsrfBundle – you should prefer using a stateless authentication mode such as a JWT token stored in the\nbrowser session storage when possible)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://symfony.com/doc/current/cookbook/email/email.html\"\u003eSend mails\u003c/a\u003e (Swift Mailer)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"../deployment/index.jsonld\"\u003eDeploy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe next step? \u003ca href=\"angularjs.jsonld\"\u003eLearn how to create an AngularJS client for the API\u003c/a\u003e.\u003c/p\u003e\n","author":[{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Stepan Anchugov","email":"kixxx1@gmail.com"},{"@type":"Person","Name":"Lukas Kahwe Smith","email":"smith@pooteeweet.org"},{"@type":"Person","Name":"Lukas Kahwe Smith","email":"smith@pooteeweet.org"},{"@type":"Person","Name":"Lukas Kahwe Smith","email":"smith@pooteeweet.org"},{"@type":"Person","Name":"Lukas Kahwe Smith","email":"smith@pooteeweet.org"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Darren Black","email":"dblack@totaltrash.net"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","Name":"Alexis Degrugillier","email":"alexis.degrugillier@stadline.com"},{"@type":"Person","Name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","Name":"Amrouche Hamza","email":"hamza@les-tilleuls.coop"}],"dateCreated":"2015-06-29T16:19:03+02:00","dateModified":"2016-06-15T13:50:41+02:00"}