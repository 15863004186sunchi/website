{"@id":"admin/handling-relations-to-collections.jsonld","@context":"http://schema.org","@type":"CreativeWork","name":"Handling Relations to Collections","text":"\u003ch1\u003eHandling Relations to Collections\u003c/h1\u003e\n\n\u003cp\u003eCurrently, API Platform Admin doesn’t handle \u003ccode\u003eto-many\u003c/code\u003e relations. The core library \u003ca href=\"https://github.com/api-platform/core/pull/1189\"\u003eis being patched\u003c/a\u003e\nto document relations to collections through OWL.\u003c/p\u003e\n\n\u003cp\u003eIn the meantime, it is possible to manually configure API Platform to handle relations to collections.\u003c/p\u003e\n\n\u003cp\u003eWe will create the admin for an API exposing \u003ccode\u003ePerson\u003c/code\u003e and \u003ccode\u003eBook\u003c/code\u003e resources linked with a \u003ccode\u003emany-to-many\u003c/code\u003e\nrelation between them (trough the \u003ccode\u003eauthors\u003c/code\u003e property).\u003c/p\u003e\n\n\u003cp\u003eThis API can be created using the following PHP code:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\nnamespace App\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ApiResource\n * @ORM\\Entity\n */\nclass Person\n{\n    /**\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\GeneratedValue\n     * @ORM\\Id\n     */\n    public $id;\n\n    /**\n     * @ORM\\Column\n     */\n    public $name;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\nnamespace App\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\Common\\Collections\\ArrayCollection;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ApiResource\n * @ORM\\Entity\n */\nclass Book\n{\n    /**\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     * @ORM\\GeneratedValue\n     * @ORM\\Id\n     */\n    public $id;\n\n    /**\n     * @ORM\\ManyToMany(targetEntity=\u0026#34;Person\u0026#34;)\n     */\n    public $authors;\n\n    public function __construct()\n    {\n        $this-\u0026gt;authors = new ArrayCollection();\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eLet’s customize the components used for the \u003ccode\u003eauthors\u003c/code\u003e property:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003eimport React, { Component } from \u0026#39;react\u0026#39;;\nimport { ReferenceArrayField, SingleFieldList, ChipField, ReferenceArrayInput, SelectArrayInput } from \u0026#39;admin-on-rest\u0026#39;;\nimport { AdminBuilder, hydraClient } from \u0026#39;@api-platform/admin\u0026#39;;\nimport parseHydraDocumentation from \u0026#39;api-doc-parser/lib/hydra/parseHydraDocumentation\u0026#39;;\n\nconst entrypoint = \u0026#39;https://demo.api-platform.com\u0026#39;;\n\nexport default class extends Component {\n  state = {api: null, resources: null};\n\n  componentDidMount() {\n    parseHydraDocumentation(entrypoint).then({api, resources} =\u0026gt; {\n        const books = r.find(r =\u0026gt; \u0026#39;books\u0026#39; === r.name);\n\n        // Set the field in the list and the show views\n        books.readableFields.find(f =\u0026gt; \u0026#39;authors\u0026#39; === f.name).fieldComponent =\n          \u0026lt;ReferenceArrayField label=\u0026#34;Authors\u0026#34; reference=\u0026#34;people\u0026#34; source=\u0026#34;authors\u0026#34; key=\u0026#34;authors\u0026#34;\u0026gt;\n            \u0026lt;SingleFieldList\u0026gt;\n              \u0026lt;ChipField source=\u0026#34;name\u0026#34; key=\u0026#34;name\u0026#34;/\u0026gt;\n            \u0026lt;/SingleFieldList\u0026gt;\n          \u0026lt;/ReferenceArrayField\u0026gt;\n        ;\n\n        // Set the input in the edit and create views\n        books.writableFields.find(f =\u0026gt; \u0026#39;authors\u0026#39; === f.name).inputComponent =\n          \u0026lt;ReferenceArrayInput label=\u0026#34;Authors\u0026#34; reference=\u0026#34;people\u0026#34; source=\u0026#34;authors\u0026#34; key=\u0026#34;authors\u0026#34;\u0026gt;\n            \u0026lt;SelectArrayInput optionText=\u0026#34;name\u0026#34;/\u0026gt;\n          \u0026lt;/ReferenceArrayInput\u0026gt;\n        ;\n\n        this.setState({api, resources});\n      }\n    )\n  }\n\n  render() {\n    if (null === this.state.api) return \u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;;\n\n    return \u0026lt;AdminBuilder api={this.state.api} restClient={hydraClient({entrypoint: entrypoint, resources: this.state.resources})}/\u0026gt;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe admin now properly handles this \u003ccode\u003eto-many\u003c/code\u003e relation!\u003c/p\u003e\n\n\u003ch2\u003eUsing an Autocomplete Input for Relations\u003c/h2\u003e\n\n\u003cp\u003eWe’ll make one last improvement to our admin: transforming the relation selector we just created to use autocompletion.\u003c/p\u003e\n\n\u003cp\u003eStart by adding a “partial search” filter on the \u003ccode\u003ename\u003c/code\u003e property of the \u003ccode\u003eBook\u003c/code\u003e resource class.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# config/api_filters.yml\n\nservices:\n    person.search_filter:\n        parent: \u0026#39;api_platform.doctrine.orm.search_filter\u0026#39;\n        arguments: [ { name: \u0026#39;partial\u0026#39; } ]\n        tags: [\u0026#39;api_platform.filter\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\n// ...\n\n/**\n * @ApiResource(attributes={\u0026#34;filters\u0026#34;={\u0026#34;person.search_filter\u0026#34;}})\n * @ORM\\Entity\n */\nclass Person\n{\n// ...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen edit the configuration of API Platform Admin to pass a \u003ccode\u003efilterToQuery\u003c/code\u003e property to the \u003ccode\u003eReferenceArrayInput\u003c/code\u003e component.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e  componentDidMount() {\n\n    // ...\n\n    // Set the input in the edit and create views\n    books.writableFields.find(f =\u0026gt; \u0026#39;authors\u0026#39; === f.name).inputComponent =\n      \u0026lt;ReferenceArrayInput label=\u0026#34;Authors\u0026#34; reference=\u0026#34;people\u0026#34; source=\u0026#34;authors\u0026#34; key=\u0026#34;authors\u0026#34; filterToQuery={searchText =\u0026gt; ({ name: searchText })}\u0026gt;\n        \u0026lt;SelectArrayInput optionText=\u0026#34;name\u0026#34;/\u0026gt;\n      \u0026lt;/ReferenceArrayInput\u0026gt;\n    ;\n\n    // ...\n  }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe autocomplete field should now work properly!\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"authentication-support.jsonld\"\u003eAuthentication Support\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"../client-generator/index.jsonld\"\u003eClient Generator: Introduction\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Erik Johansson","email":"erik.pm.johansson@gmail.com"},{"@type":"Person","name":"David Podhola","email":"david.podhola@naseukoly.cz"},{"@type":"Person","name":"Laury Sorriaux","email":"laury@les-tilleuls.coop"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"}],"dateCreated":"2017-09-06T12:24:49+02:00","dateModified":"2017-10-30T08:28:34+01:00"}