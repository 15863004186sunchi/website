{"@context":"http://schema.org","@type":"CreativeWork","name":"Getting Started","text":"\u003ch1\u003eGetting Started\u003c/h1\u003e\n\n\u003ch2\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eInstall the skeleton and the library:\u003c/p\u003e\n\n\u003cp\u003eStart by installing \u003ca href=\"https://yarnpkg.com/\"\u003ethe Yarn package manager\u003c/a\u003e (\u003ca href=\"https://www.npmjs.com/\"\u003eNPM\u003c/a\u003e is also supported) and\nthe \u003ca href=\"https://github.com/facebookincubator/create-react-app\"\u003eCreate React App\u003c/a\u003e tool.\u003c/p\u003e\n\n\u003cp\u003eThen, create a new React application for your admin:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ create-react-app my-admin\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNow, add install \u003ccode\u003e@api-platform/admin\u003c/code\u003e library in your newly created project:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ yarn add @api-platform/admin\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eCreating the Admin\u003c/h2\u003e\n\n\u003cp\u003eEdit the \u003ccode\u003esrc/App.js\u003c/code\u003e file like the following:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003eimport React, { Component } from \u0026#39;react\u0026#39;;\nimport { HydraAdmin } from \u0026#39;@api-platform-admin\u0026#39;;\n\nclass App extends Component {\n  render() {\n    return \u0026lt;HydraAdmin entrypoint=\u0026#34;https://demo.api-platform.com\u0026#34;/\u0026gt; // Replace with your own API entrypoint\n  }\n}\n\nexport default App;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYour new administration interface is ready! Type \u003ccode\u003eyarn start\u003c/code\u003e to try it!\u003c/p\u003e\n\n\u003cp\u003eNote: if you don’t want to hardcode the API URL, you can \u003ca href=\"https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#adding-custom-environment-variables\"\u003euse an environment variable\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2\u003eCustomizing the Admin\u003c/h2\u003e\n\n\u003cp\u003eThe API Platform’s admin parses the Hydra documentation exposed by the API and transforms it to an object data structure. This data structure can be customized to add, remove or customize resources and properties. To do so, we can leverage the \u003ccode\u003eAdminBuilder\u003c/code\u003e component provided by the library. It’s a lower level component than the \u003ccode\u003eHydraAdmin\u003c/code\u003e one we used in the previous example. It allows to access to the object storing the structure of admin’s screens.\u003c/p\u003e\n\n\u003ch3\u003eUsing Custom Components\u003c/h3\u003e\n\n\u003cp\u003eIn the following example, we change components used for the \u003ccode\u003edescription\u003c/code\u003e property of the \u003ccode\u003ebooks\u003c/code\u003e resource to ones accepting HTML (respectively \u003ccode\u003eRichTextField\u003c/code\u003e that renders HTML markup and \u003ccode\u003eRichTextInput\u003c/code\u003e, a WYSWYG editor).\n(To use the \u003ccode\u003eRichTextInput\u003c/code\u003e, the \u003ccode\u003eaor-rich-text-input\u003c/code\u003e package is must be installed: \u003ccode\u003eyarn add aor-rich-text-input\u003c/code\u003e).\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003eimport React from \u0026#39;react\u0026#39;;\nimport { RichTextField } from \u0026#39;admin-on-rest\u0026#39;;\nimport RichTextInput from \u0026#39;aor-rich-text-input\u0026#39;;\nimport HydraAdmin from \u0026#39;api-platform-admin/lib/hydra/HydraAdmin\u0026#39;;\nimport parseHydraDocumentation from \u0026#39;api-doc-parser/lib/hydra/parseHydraDocumentation\u0026#39;;\n\nconst entrypoint = \u0026#39;https://demo.api-platform.com\u0026#39;;\n\nconst apiDocumentationParser = entrypoint =\u0026gt; parseHydraDocumentation(entrypoint)\n  .then(api =\u0026gt; {\n    api.resources.map(resource =\u0026gt; {\n      const books = api.resources.find(r =\u0026gt; \u0026#39;books\u0026#39; === r.name);\n      books.fields.find(f =\u0026gt; \u0026#39;description\u0026#39; === f.name).fieldComponent = \u0026lt;RichTextField source=\u0026#34;description\u0026#34; key=\u0026#34;description\u0026#34;/\u0026gt;;\n      books.fields.find(f =\u0026gt; \u0026#39;description\u0026#39; === f.name).inputComponent = \u0026lt;RichTextInput source=\u0026#34;description\u0026#34; key=\u0026#34;description\u0026#34;/\u0026gt;;\n\n      return resource;\n    });\n\n    return api;\n  })\n;\n\nexport default (props) =\u0026gt; (\n  \u0026lt;HydraAdmin apiDocumentationParser={apiDocumentationParser} entrypoint={entrypoint}/\u0026gt;\n);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003efieldComponent\u003c/code\u003e property of the \u003ccode\u003eField\u003c/code\u003e class allows to set the component used to render a property in list and show screens.\nThe \u003ccode\u003einputComponent\u003c/code\u003e property allows to set the component to use to render the input used in create and edit screens.\u003c/p\u003e\n\n\u003cp\u003eAny \u003ca href=\"https://marmelab.com/admin-on-rest/Fields.html\"\u003efield\u003c/a\u003e or \u003ca href=\"https://marmelab.com/admin-on-rest/Inputs.html\"\u003einput\u003c/a\u003e provided by the Admin On Rest library can be used.\u003c/p\u003e\n\n\u003cp\u003eTo go further, take a look to the “\u003ca href=\"https://marmelab.com/admin-on-rest/CustomApp.html\"\u003eIncluding admin-on-rest on another React app\u003c/a\u003e” documentation page of Admin On Rest to learn how to use directly redux, react-router, and redux-saga along with components provided by this library.\u003c/p\u003e\n\n\u003ch3\u003eManaging Files and Images\u003c/h3\u003e\n\n\u003cp\u003eIn the following example, we will:\n* find every \u003ca href=\"http://schema.org/ImageObject\"\u003eImageObject\u003c/a\u003e resources. For each \u003ca href=\"http://schema.org/contentUrl\"\u003econtentUrl\u003c/a\u003e fields, we will use \u003ca href=\"https://marmelab.com/admin-on-rest/Fields.html#imagefield\"\u003eImageField\u003c/a\u003e as \u003ccode\u003efield\u003c/code\u003e and \u003ca href=\"https://marmelab.com/admin-on-rest/Inputs.html#imageinput\"\u003eImageInput\u003c/a\u003e as \u003ccode\u003einput\u003c/code\u003e.\n* \u003ca href=\"https://marmelab.com/admin-on-rest/Inputs.html#imageinput\"\u003eImageInput\u003c/a\u003e will return a \u003ca href=\"https://developer.mozilla.org/en/docs/Web/API/File\"\u003eFile\u003c/a\u003e instance. In this example, we will send a multi-part form data to a special action (\u003ccode\u003ehttps://demo.api-platform.com/images/upload\u003c/code\u003e). The action will return the ID of the uploaded image. We will “replace” the \u003ca href=\"https://developer.mozilla.org/en/docs/Web/API/File\"\u003eFile\u003c/a\u003e instance by the ID in \u003ccode\u003enormalizeData\u003c/code\u003e.\n* As \u003ccode\u003econtentUrl\u003c/code\u003e fields will return a string, we have to convert Hydra data to AOR data. This action will be done by \u003ccode\u003edenormalizeData\u003c/code\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003eimport { FunctionField, ImageField, ImageInput } from \u0026#39;admin-on-rest/lib/mui\u0026#39;;\nimport React from \u0026#39;react\u0026#39;;\nimport HydraAdmin from \u0026#39;api-platform-admin/lib/hydra/HydraAdmin\u0026#39;;\nimport parseHydraDocumentation from \u0026#39;api-doc-parser/lib/hydra/parseHydraDocumentation\u0026#39;;\n\nconst entrypoint = \u0026#39;https://demo.api-platform.com\u0026#39;;\n\nconst apiDocumentationParser = entrypoint =\u0026gt; parseHydraDocumentation(entrypoint)\n  .then(api =\u0026gt; {\n    api.resources.map(resource =\u0026gt; {\n      if (\u0026#39;http://schema.org/ImageObject\u0026#39; === resource.id) {\n        resource.fields.map(field =\u0026gt; {\n          if (\u0026#39;http://schema.org/contentUrl\u0026#39; === field.id) {\n            field.denormalizeData = value =\u0026gt; ({\n              src: value\n            });\n\n            field.fieldComponent = (\n              \u0026lt;FunctionField\n                key={field.name}\n                render={\n                  record =\u0026gt; (\n                    \u0026lt;ImageField key={field.name} record={record} source={`${field.name}.src`}/\u0026gt;\n                  )\n                }\n                source={field.name}\n              /\u0026gt;\n            );\n\n            field.inputComponent = (\n              \u0026lt;ImageInput accept=\u0026#34;image/*\u0026#34; key={field.name} multiple={false} source={field.name}\u0026gt;\n                \u0026lt;ImageField source=\u0026#34;src\u0026#34;/\u0026gt;\n              \u0026lt;/ImageInput\u0026gt;\n            );\n\n            field.normalizeData = value =\u0026gt; {\n              if (value[0] \u0026amp;\u0026amp; value[0].rawFile instanceof File) {\n                const body = new FormData();\n                body.append(\u0026#39;file\u0026#39;, value[0].rawFile);\n\n                return fetch(`${entrypoint}/images/upload`, { body, method: \u0026#39;POST\u0026#39; })\n                  .then(response =\u0026gt; response.json());\n              }\n\n              return value.src;\n            };\n          }\n\n          return field;\n        });\n      }\n\n      return resource;\n    });\n\n    return api;\n  })\n;\n\nexport default (props) =\u0026gt; (\n  \u0026lt;HydraAdmin apiDocumentationParser={apiDocumentationParser} entrypoint={entrypoint}/\u0026gt;\n);\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: In this example, we choose to send the file via a multi-part form data, but you are totally free to use another solution (like \u003ccode\u003ebase64\u003c/code\u003e). But keep in mind that multi-part form data is the most efficient solution.\u003c/p\u003e\n\n\u003ch3\u003eUsing a Custom Validation Function or Inject Custom Props\u003c/h3\u003e\n\n\u003cp\u003eYou can use \u003ccode\u003efieldProps\u003c/code\u003e and \u003ccode\u003einputProps\u003c/code\u003e to respectively inject custom properties to fields and inputs generated by API\nPlatform Admin. This is particularly useful to add custom validation rules:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003eimport React, { Component } from \u0026#39;react\u0026#39;;\nimport { AdminBuilder, hydraClient } from \u0026#39;api-platform-admin\u0026#39;;\nimport parseHydraDocumentation from \u0026#39;api-doc-parser/lib/hydra/parseHydraDocumentation\u0026#39;;\n\nconst entrypoint = \u0026#39;https://demo.api-platform.com\u0026#39;;\n\nclass App extends Component {\n  state = {api: null};\n\n  componentDidMount() {\n    parseHydraDocumentation(entrypoint).then(api =\u0026gt; {\n      const books = api.resources.find(r =\u0026gt; \u0026#39;books\u0026#39; === r.name);\n\n      books.writableFields.find(f =\u0026gt; \u0026#39;description\u0026#39; === f.name).inputProps = {\n        validate: value =\u0026gt; value.length \u0026gt;= 30 ? undefined : \u0026#39;Minimum length: 30\u0026#39;;\n      };\n\n      this.setState({api: api});\n    })\n  }\n\n  render() {\n    if (null === this.state.api) return \u0026lt;div\u0026gt;Loading...\u0026lt;/div\u0026gt;;\n\n    return \u0026lt;AdminBuilder api={this.state.api} restClient={hydraClient(entrypoint)}/\u0026gt;\n  }\n}\n\nexport default App;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"index.jsonld\"\u003eIntroduction\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"authentication-support.jsonld\"\u003eAuthentication Support\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"David Podhola","email":"david.podhola@naseukoly.cz"}],"dateCreated":"2017-09-06T12:24:49+02:00","dateModified":"2017-09-27T10:44:07+02:00"}