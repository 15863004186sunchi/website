{"@id":"admin/authentication-support.jsonld","@context":"http://schema.org","@type":"CreativeWork","name":"Authentication Support","text":"\u003ch1\u003eAuthentication Support\u003c/h1\u003e\n\n\u003cp\u003eAuthentication can easily be handled when using the API Platformâ€™s admin library.\nIn the following section, we will assume \u003ca href=\"https://api-platform.com/docs/core/jwt\"\u003ethe API is secured using JWT\u003c/a\u003e, but the\nprocess is similar for other authentication mechanisms. The \u003ccode\u003elogin_uri\u003c/code\u003e is the full URI to the route specified by the \u003ccode\u003efirewalls.login.json_login.check_path\u003c/code\u003e config in the \u003ca href=\"https://api-platform.com/docs/core/jwt\"\u003eJWT documentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThe first step is to create a client to handle the authentication process:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// src/authClient.js\nimport { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from \u0026#39;admin-on-rest\u0026#39;;\n\n// Change this to be your own login check route.\nconst login_uri = \u0026#39;https://demo.api-platform.com/login_check\u0026#39;; \n\nexport default (type, params) =\u0026gt; {\n  switch (type) {\n    case AUTH_LOGIN:\n      const { username, password } = params;\n      const request = new Request(`${login_uri}`, {\n        method: \u0026#39;POST\u0026#39;,\n        body: JSON.stringify({ email: username, password }),\n        headers: new Headers({ \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39; }),\n      });\n\n      return fetch(request)\n        .then(response =\u0026gt; {\n          if (response.status \u0026lt; 200 || response.status \u0026gt;= 300) throw new Error(response.statusText);\n\n          return response.json();\n        })\n        .then(({ token }) =\u0026gt; {\n          localStorage.setItem(\u0026#39;token\u0026#39;, token); // The JWT token is stored in the browser\u0026#39;s local storage\n        });\n\n    case AUTH_LOGOUT:\n      localStorage.removeItem(\u0026#39;token\u0026#39;);\n      break;\n\n    case AUTH_ERROR:\n      if (401 === params.status || 403 === params.status) {\n        localStorage.removeItem(\u0026#39;token\u0026#39;);\n\n        return Promise.reject();\n      }\n      break;\n\n    case AUTH_CHECK:\n      return localStorage.getItem(\u0026#39;token\u0026#39;) ? Promise.resolve() : Promise.reject();\n      \n      default:\n          return Promise.resolve();\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen, configure the \u003ccode\u003eAdmin\u003c/code\u003e component to use the authentication client we just created:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-javascript\"\u003e// src/Admin.js\nimport React, { Component } from \u0026#39;react\u0026#39;;\nimport { HydraAdmin, hydraClient, fetchHydra } from \u0026#39;@api-platform/admin\u0026#39;;\nimport authClient from \u0026#39;./authClient\u0026#39;;\n\nconst entrypoint = \u0026#39;https://demo.api-platform.com\u0026#39;;\n\nconst fetchWithAuth = (url, options = {}) =\u0026gt; {\n  if (!options.headers) options.headers = new Headers({ Accept: \u0026#39;application/ld+json\u0026#39; });\n\n  options.headers.set(\u0026#39;Authorization\u0026#39;, `Bearer ${localStorage.getItem(\u0026#39;token\u0026#39;)}`);\n  return fetchHydra(url, options);\n};\n\nconst restClient = (api) =\u0026gt; (hydraClient(api, fetchWithAuth));\n\nclass Admin extends Component {\n  render() {\n    return \u0026lt;HydraAdmin entrypoint={entrypoint} restClient={restClient} authClient={authClient}/\u0026gt;\n  }\n}\n\nexport default Admin;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRefer to \u003ca href=\"https://marmelab.com/admin-on-rest/Authentication.html\"\u003ethe chapter dedicated to authentication in the Admin On Rest documentation\u003c/a\u003e\nfor more information.\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"getting-started.jsonld\"\u003eGetting Started\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"handling-relations-to-collections.jsonld\"\u003eHandling Relations to Collections\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Steve Hall","email":"sh41@users.noreply.github.com"},{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"}],"dateCreated":"2017-09-06T12:24:49+02:00","dateModified":"2017-10-04T21:29:51+01:00"}