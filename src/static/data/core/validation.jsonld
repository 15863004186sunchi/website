{"@context":"http://schema.org","@type":"CreativeWork","name":"Validation","text":"\u003ch1\u003eValidation\u003c/h1\u003e\n\n\u003cp\u003eAPI Platform Core uses the \u003ca href=\"http://symfony.com/doc/current/book/validation.html\"\u003eSymfony Validator component\u003c/a\u003e to validate\nentities.\u003c/p\u003e\n\n\u003cp\u003eWithout specific configuration, it uses the default validation group, but this behavior is customizable.\u003c/p\u003e\n\n\u003ch2\u003eUsing Validation Groups\u003c/h2\u003e\n\n\u003cp\u003eBuilt-in actions are able to leverage Symfony’s \u003ca href=\"http://symfony.com/doc/current/book/validation.html#validation-groups\"\u003evalidation groups\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eYou can customize them by editing the resource configuration and add the groups you want to use when the validation occurs:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ApiResource(attributes={\u0026#34;validation_groups\u0026#34;={\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;}})\n */\nclass Book\n{\n    /**\n     * @Assert\\NotBlank(groups={\u0026#34;a\u0026#34;})\n     */\n    private $name;\n\n    /**\n     * @Assert\\NotNull(groups={\u0026#34;b\u0026#34;})\n     */\n    private $author;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWith the previous configuration, the validations groups \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e will be used when validation is performed.\u003c/p\u003e\n\n\u003cp\u003eLike for \u003ca href=\"serialization-groups-and-relations.jsonld#using-different-serialization-groups-per-operation\"\u003eserialization groups\u003c/a\u003e,\nyou can specify validation groups globally or on a per operation basis.\u003c/p\u003e\n\n\u003cp\u003eOf course, you can use XML or YAML configuration format instead of annotations if you prefer.\u003c/p\u003e\n\n\u003cp\u003eYou may also pass in a \u003ca href=\"http://symfony.com/doc/current/validation/sequence_provider.html\"\u003egroup sequence\u003c/a\u003e in place of\nthe array of group names.\u003c/p\u003e\n\n\u003ch2\u003eDynamic Validation Groups\u003c/h2\u003e\n\n\u003cp\u003eIf you need to dynamically determine which validation groups to use for an entity in different scenarios, just pass in a\n\u003ca href=\"http://php.net/manual/en/language.types.callable.php\"\u003ecallable\u003c/a\u003e. The callback will receive the entity object as its first\nargument, and should return an array of group names or a \u003ca href=\"http://symfony.com/doc/current/validation/sequence_provider.html\"\u003egroup sequence\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn the following example, we use a static method to return the validation groups:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ApiResource(attributes={\u0026#34;validation_groups\u0026#34;={Book::class, \u0026#34;validationGroups\u0026#34;}})\n */\nclass Book\n{\n    /**\n     * Return dynamic validation groups.\n     *\n     * @param self $book Contains the instance of Book to validate.\n     *\n     * @return string[]\n     */\n    public static function validationGroups(self $book)\n    {\n        return [\u0026#39;a\u0026#39;];\n    }\n\n    /**\n     * @Assert\\NotBlank(groups={\u0026#34;a\u0026#34;})\n     */\n    private $name;\n\n    /**\n     * @Assert\\NotNull(groups={\u0026#34;b\u0026#34;})\n     */\n    private $author;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eAlternatively, you can use a service to retrieve the groups to use:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Validator/AdminGroupsGenerator.php\n\nnamespace AppBundle\\Validator;\n\nuse AppBundle\\Entity\\Book;\nuse Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface;\n\nfinal class AdminGroupsGenerator\n{\n    private $authorizationChecker;\n\n    public function __construct(AuthorizationCheckerInterface $authorizationChecker)\n    {\n        $this-\u0026gt;authorizationChecker = $authorizationChecker;\n    }\n\n    public function __invoke(Book $book): array\n    {\n        return $this-\u0026gt;authorizationChecker-\u0026gt;isGranted(\u0026#39;ROLE_ADMIN\u0026#39;, $book) ? [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;] : [\u0026#39;a\u0026#39;];\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis class selects the groups to apply regarding the role of the current user: if the current user has the \u003ccode\u003eROLE_ADMIN\u003c/code\u003e role, groups \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e are returned. In other cases, just \u003ccode\u003ea\u003c/code\u003e is returned.\u003c/p\u003e\n\n\u003cp\u003eThis class is automatically registered as a service thanks to \u003ca href=\"https://symfony.com/doc/current/service_container/autowiring.html\"\u003ethe autowiring feature of the Symfony Dependency Injection Component\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eThen, configure the entity class to use this service to retrieve validation groups:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/AppBundle/Entity/Book.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse AppBundle\\Validator\\AdminGroupsGenerator;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @ApiResource(attributes={\u0026#34;validation_groups\u0026#34;=AdminGroupsGenerator::class})\n */\nclass Book\n{\n    /**\n     * @Assert\\NotBlank(groups={\u0026#34;a\u0026#34;})\n     */\n    private $name;\n\n    /**\n     * @Assert\\NotNull(groups={\u0026#34;b\u0026#34;})\n     */\n    private $author;\n\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"serialization-groups-and-relations.jsonld\"\u003eSerialization Groups and Relations\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"pagination.jsonld\"\u003ePagination\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","name":"Paul Le Corre","email":"paul@lecorre.me"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"Gildas NOEL","email":"g.noel@ackwa.fr"},{"@type":"Person","name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","name":"Ener-Getick","email":"egetick@gmail.com"},{"@type":"Person","name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","name":"Prou Yann","email":"yann@les-tilleuls.coop"},{"@type":"Person","name":"Prou Yann","email":"yann@les-tilleuls.coop"},{"@type":"Person","name":"Tomas","email":"norkunas.tom@gmail.com"},{"@type":"Person","name":"Grégoire Hébert","email":"gregoire@les-tilleuls.coop"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"Pierre","email":"pierre-H@users.noreply.github.com"}],"dateCreated":"2016-03-30T22:29:36+02:00","dateModified":"2017-09-12T17:43:05+02:00"}