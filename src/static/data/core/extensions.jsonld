{"@context":"http://schema.org","@type":"CreativeWork","name":"Extensions","text":"\u003ch1\u003eExtensions\u003c/h1\u003e\n\n\u003cp\u003eAPI Platform Core provides a system to extend queries on items and collections.\u003c/p\u003e\n\n\u003cp\u003eExtensions are specific to Doctrine, and therefore, the Doctrine ORM support must be enabled to use this feature. If you use custom providers it’s up to you to implement your own extension system or not.\u003c/p\u003e\n\n\u003ch2\u003eCustom Extension\u003c/h2\u003e\n\n\u003cp\u003eCustom extensions must implement the \u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryCollectionExtensionInterface\u003c/code\u003e and / or the \u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryItemExtensionInterface\u003c/code\u003e interfaces, to be run when querying for a collection of items and when querying for an item respectively.\u003c/p\u003e\n\n\u003cp\u003eIf you use \u003ca href=\"data-providers.jsonld\"\u003ecustom data providers\u003c/a\u003e, they must support extensions and be aware of active extensions to work properly.\u003c/p\u003e\n\n\u003ch2\u003eExample\u003c/h2\u003e\n\n\u003cp\u003eIn the following example, we will see how to always get the offers owned by the current user. We will set up an exception, whenever the user has the \u003ccode\u003eROLE_ADMIN\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eGiven these two entities:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Entity/User.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource\n */\nclass User\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Entity/Offer.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\n\n/**\n * @ApiResource\n */\nclass Offer\n{\n   /**\n     * @var User\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;User\u0026#34;)\n     */\n    private $user;\n\n    //...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Doctrine/ORM/Extension/CurrentUserExtension.php\n\nnamespace AppBundle\\Doctrine\\ORM\\Extension;\n\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryCollectionExtensionInterface;\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryItemExtensionInterface;\nuse ApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Util\\QueryNameGeneratorInterface;\nuse AppBundle\\Entity\\Offer;\nuse AppBundle\\Entity\\User;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationChecker;\n\nfinal class CurrentUserExtension implements QueryCollectionExtensionInterface, QueryItemExtensionInterface\n{\n    private $tokenStorage;\n    private $authorizationChecker;\n\n    public function __construct(TokenStorageInterface $tokenStorage, AuthorizationChecker $checker)\n    {\n        $this-\u0026gt;tokenStorage = $tokenStorage;\n        $this-\u0026gt;authorizationChecker = $checker;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function applyToCollection(QueryBuilder $queryBuilder, QueryNameGeneratorInterface $queryNameGenerator, string $resourceClass, string $operationName = null)\n    {\n        $this-\u0026gt;addWhere($queryBuilder, $resourceClass);\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function applyToItem(QueryBuilder $queryBuilder, QueryNameGeneratorInterface $queryNameGenerator, string $resourceClass, array $identifiers, string $operationName = null, array $context = [])\n    {\n        $this-\u0026gt;addWhere($queryBuilder, $resourceClass);\n    }\n\n    /**\n     *\n     * @param QueryBuilder $queryBuilder\n     * @param string       $resourceClass\n     */\n    private function addWhere(QueryBuilder $queryBuilder, string $resourceClass)\n    {\n        $user = $this-\u0026gt;tokenStorage-\u0026gt;getToken()-\u0026gt;getUser();\n        if ($user instanceof User \u0026amp;\u0026amp; Offer::class === $resourceClass \u0026amp;\u0026amp; !$this-\u0026gt;authorizationChecker-\u0026gt;isGranted(\u0026#39;ROLE_ADMIN\u0026#39;)) {\n            $rootAlias = $queryBuilder-\u0026gt;getRootAliases()[0];\n            $queryBuilder-\u0026gt;andWhere(sprintf(\u0026#39;%s.user = :current_user\u0026#39;, $rootAlias));\n            $queryBuilder-\u0026gt;setParameter(\u0026#39;current_user\u0026#39;, $user-\u0026gt;getId());\n        }\n    }\n}\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFinally register the custom extension:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    app.doctrine.orm.query_extension.current_user:\n        class: AppBundle\\Doctrine\\ORM\\Extension\\CurrentUserExtension\n        public: false\n        arguments:\n            - \u0026#39;@api_platform.metadata.property.name_collection_factory\u0026#39;\n            - \u0026#39;@api_platform.metadata.property.metadata_factory\u0026#39;\n            - \u0026#39;@security.token_storage\u0026#39;\n            - \u0026#39;@security.authorization_checker\u0026#39;\n        tags:\n            - { name: api_platform.doctrine.orm.query_extension.collection, priority: 9 }\n            - { name: api_platform.doctrine.orm.query_extension.item }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThanks to the \u003ccode\u003eapi_platform.doctrine.orm.query_extension.collection\u003c/code\u003e tag, API Platform will register this service as a collection extension. The \u003ccode\u003eapi_platform.doctrine.orm.query_extension.item\u003c/code\u003e do the same thing for items.\u003c/p\u003e\n\n\u003cp\u003eNotice the priority level for the \u003ccode\u003eapi_platform.doctrine.orm.query_extension.collection\u003c/code\u003e tag. When an extension implements the \u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryResultCollectionExtensionInterface\u003c/code\u003e or the \u003ccode\u003eApiPlatform\\Core\\Bridge\\Doctrine\\Orm\\Extension\\QueryResultItemExtensionInterface\u003c/code\u003e interface to return results by itself, any lower priority extension will not be executed. Because the pagination is enabled by default with a priority of 8, the priority of the \u003ccode\u003eapp.doctrine.orm.query_extension.current_user\u003c/code\u003e service must be at least 9 to ensure its execution.\u003c/p\u003e\n\n\u003ch3\u003eBlocking Anonymous Users\u003c/h3\u003e\n\n\u003cp\u003eThis example adds a \u003ccode\u003eWHERE\u003c/code\u003e clause condition only when a fully authenticated user without \u003ccode\u003eROLE_ADMIN\u003c/code\u003e tries to access to a resource. It means that anonymous users will be able to access to all data. To prevent this potential security issue, the API must ensure that the current user is authenticated.\u003c/p\u003e\n\n\u003cp\u003eTo secure the access to endpoints, use the following access control rule:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/security.yml\n\nsecurity:\n    # ...\n\n    access_control:\n        # ...\n        - { path: ^/offers, roles: IS_AUTHENTICATED_FULLY }\n        - { path: ^/users, roles: IS_AUTHENTICATED_FULLY }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"data-providers.jsonld\"\u003eData Providers\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"security.jsonld\"\u003eSecurity\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Grégoire Hébert","email":"gregoire@les-tilleuls.coop"},{"@type":"Person","name":"Grégoire Pineau","email":"lyrixx@lyrixx.info"}],"dateCreated":"2016-10-24T15:20:44+02:00","dateModified":"2016-12-07T23:31:22+01:00"}