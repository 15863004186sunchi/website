{"@context":"http://schema.org","@type":"CreativeWork","name":"The Serialization Process","text":"\u003ch1\u003eThe Serialization Process\u003c/h1\u003e\n\n\u003ch2\u003eOverall Process\u003c/h2\u003e\n\n\u003cp\u003eAPI Platform embraces and extends the Symfony Serializer Component to transform PHP entities in hypermedia API responses.\u003c/p\u003e\n\n\u003cp\u003eThe main serialization process has two stages:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/SerializerWorkflow.png\" alt=\"Serializer workflow\"/\u003e\u003c/p\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003eAs you can see in the picture above, an array is used as a man in the middle. This way, Encoders will only deal with turning specific formats into arrays and vice versa. The same way, Normalizers will deal with turning specific objects into arrays and vice versa.\n– \u003ca href=\"https://symfony.com/doc/current/components/serializer.html\"\u003eThe Symfony documentation\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eUnlike Symfony itself, API Platform leverages custom normalizers, its router and the \u003ca href=\"data-providers.jsonld\"\u003edata provider\u003c/a\u003e system to do an advanced tranformation. Metadata are added to the generated document including links, type information, pagination data or available filters.\u003c/p\u003e\n\n\u003cp\u003eThe API Platform Serializer is very extensible, you can register custom normalizers and encoders to support other formats. You can also decorate existing normalizers to customize their behaviors.\u003c/p\u003e\n\n\u003ch2\u003eAvailable Serializers\u003c/h2\u003e\n\n\u003ch3\u003eNormalizers\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://json-ld.org\"\u003eJSON-LD\u003c/a\u003e serializer\n\u003ccode\u003eapi_platform.jsonld.normalizer.item\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eJSON-LD, or JavaScript Object Notation for Linked Data, is a method of encoding Linked Data using JSON. It is a World Wide Web Consortium Recommendation.\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Hypertext_Application_Language\"\u003eHAL\u003c/a\u003e serializer\n\u003ccode\u003eapi_platform.hal.normalizer.item\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\n\u003cli\u003e\u003cp\u003eJSON, XML, CSV, YAML serializer (using the Symfony serializer)\n\u003ccode\u003eapi_platform.serializer.normalizer.item\u003c/code\u003e\u003c/p\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eDecorating a Serializer and Add Extra Data\u003c/h2\u003e\n\n\u003cp\u003eIn the following example, we will see how we add extra informations to the output.\nHere is how we add the date on each request in \u003ccode\u003eGET\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n\n  # ...\n\n    \u0026#39;AppBundle\\Serializer\\ApiNormalizer\u0026#39;:\n        decorates: \u0026#39;api_platform.jsonld.normalizer.item\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src/Appbundle/Serializer/ApiSerializer\n\nnamespace AppBundle\\Serializer;\n\nuse ApiPlatform\\Core\\Serializer\\AbstractItemNormalizer;\nuse ApiPlatform\\Core\\Serializer\\ItemNormalizer;\nuse Symfony\\Component\\Console\\Exception\\InvalidArgumentException;\n\n\nfinal class ApiNormalizer extends AbstractItemNormalizer\n{\n    public function __construct(ItemNormalizer $decorated)\n    {\n        $this-\u0026gt;decorated = $decorated;\n    }\n    \n    public function supportsNormalization($data, $format = null)\n    {\n        return $this-\u0026gt;decorated-\u0026gt;supportsNormalization($data, $format);\n    }\n    \n    public function normalize($object, $format = null, array $context = [])\n    {\n        $data = $this-\u0026gt;decorated-\u0026gt;normalize($object, $format, $context);\n        if (is_array($data)) {\n            $data[\u0026#39;date\u0026#39;] = date(\\DateTime::RFC3339);\n        }\n        return $data;\n    }\n    \n    public function supportsDenormalization($data, $type, $format = null)\n    {\n        return $this-\u0026gt;decorated-\u0026gt;supportsNormalization($data, $type, $format);\n    }\n    \n    public function denormalize($data, $class, $format = null, array $context = [])\n    {\n        return $this-\u0026gt;decorated-\u0026gt;denormalise($data, $class, $format, $context);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"core/swagger.jsonld\"\u003eSwagger Support\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"schema-generator/index.jsonld\"\u003eSchema Generator: Introduction\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Tim","email":"tim.herlaud@gmail.com"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2017-09-11T14:01:47+02:00","dateModified":"2017-09-11T17:42:21+02:00"}