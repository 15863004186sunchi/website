{"@context":"http://schema.org","@type":"CreativeWork","name":"Content negotiation","text":"\u003ch1\u003eContent negotiation\u003c/h1\u003e\n\n\u003cp\u003eThe API system has builtin \u003ca href=\"https://en.wikipedia.org/wiki/Content_negotiation\"\u003econtent negotiation\u003c/a\u003e capabilities.\nIt leverages the \u003ca href=\"https://github.com/willdurand/Negotiation\"\u003e\u003ccode\u003ewilldurand/negotiation\u003c/code\u003e\u003c/a\u003e library.\u003c/p\u003e\n\n\u003cp\u003eThe only supported format by default is \u003ca href=\"https://json-ld.org\"\u003eJSON-LD\u003c/a\u003e. Support for other formats such as XML or \u003ca href=\"https://developers.google.com/protocol-buffers/\"\u003eProtobuf\u003c/a\u003e\ncan be added easily.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform Core will automatically detect the best format to return according to the \u003ccode\u003eAccept\u003c/code\u003e HTTP header sent by the\nclient and enabled formats. If no format asked by the client is supported by the server, the response will be sent in the\nfirst format defined in the \u003ccode\u003esupport_formats\u003c/code\u003e configuration key (see below).\u003c/p\u003e\n\n\u003cp\u003eAn example using the builtin XML serializer is available in Behat specs: \u003ca href=\"https://github.com/api-platform/core/blob/master/features/content_negotiation.feature\"\u003ehttps://github.com/api-platform/core/blob/master/features/content_negotiation.feature\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2\u003eEnabling several formats\u003c/h2\u003e\n\n\u003cp\u003eThe first required step is to configure allowed formats. The following configuration will enable the support of a format\ncalled \u003ccode\u003emyformat\u003c/code\u003e and having \u003ccode\u003eapplication/vnd.myformat\u003c/code\u003e as \u003ca href=\"https://en.wikipedia.org/wiki/Media_type\"\u003eMIME type\u003c/a\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yml\n\napi_platform:\n    # ...\n    supported_formats:\n        jsonld:                        [\u0026#39;application/ld+json\u0026#39;]\n        myformat:                      [\u0026#39;application/vnd.myformat\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRegistering a custom format in the Negotiation library\u003c/h2\u003e\n\n\u003cp\u003eIf the format you want to use is not supported by default in the Negotiation library, you must register it using a \u003ca href=\"https://symfony.com/doc/current/components/dependency_injection/compilation.html#creating-a-compiler-pass\"\u003ecompiler\npass\u003c/a\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e// src/AppBundle/DependencyInjection/Compiler/MyFormatPass.php\n\nnamespace AppBundle\\DependencyInjection\\Compiler;\n\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\n\nclass MyFormatPass implements CompilerPassInterface\n{\n    public function process(ContainerBuilder $container)\n    {\n        // ...\n\n        $container-\u0026gt;getDefinition(\u0026#39;api.format_negotiator\u0026#39;)-\u0026gt;addMethodCall(\u0026#39;registerFormat\u0026#39;, [\n            \u0026#39;myformat\u0026#39;, [\u0026#39;application/vnd.myformat\u0026#39;], true,\n        ]);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eDon’t forget to register your compiler pass into the container from the \u003ccode\u003eBundle::build(ContainerBuilder $container)\u003c/code\u003e method of your bundle:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e// src/AppBundle/AppBundle.php\n\nnamespace AppBundle;\n\nuse AppBundle\\DependencyInjection\\Compiler\\MyFormatPass;\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\HttpKernel\\Bundle\\Bundle;\n\nclass AppBundle extends Bundle\n{\n    public function build(ContainerBuilder $container)\n    {\n        $container-\u0026gt;addCompilerPass(new MyFormatPass());\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eRegistering a custom serializer\u003c/h2\u003e\n\n\u003cp\u003eThen you need to create custom encoder, decoder and eventually a normalizer and a denormalizer for your format. API Platform\nCore relies on the Symfony Serializer Component. \u003ca href=\"https://symfony.com/doc/current/cookbook/serializer.html#adding-normalizers-and-encoders\"\u003eRefer to its dedicated documentation\u003c/a\u003e\nto learn how to create and register such classes.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform Core will automatically call the serializer with your defined format name (\u003ccode\u003emyformat\u003c/code\u003e in previous examples)\nas \u003ccode\u003eformat\u003c/code\u003e parameter during the deserialization process.\u003c/p\u003e\n\n\u003ch2\u003eCreating a responder\u003c/h2\u003e\n\n\u003cp\u003eFinally, you need to create a class that will convert the raw data to formatted data and the according HTTP response.\nHere is an example responder using the XML serializer shipped with the Symfony Serializer Component:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e// src/AppBundle/EventListener/XmlResponderViewListener.php\n\nnamespace AppBundle\\EventListener;\n\nuse ApiPlatform\\Core\\Metadata\\Resource\\Factory\\ResourceMetadataFactoryInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Event\\GetResponseForControllerResultEvent;\nuse Symfony\\Component\\Serializer\\SerializerInterface;\n\n/**\n * Serializes data in XML then builds the response object.\n */\nfinal class XmlResponderViewListener\n{\n    const FORMAT = \u0026#39;xml\u0026#39;;\n\n    private $serializer;\n    private $resourceMetadataFactory;\n\n    public function __construct(SerializerInterface $serializer, ResourceMetadataFactoryInterface $resourceMetadataFactory)\n    {\n        $this-\u0026gt;serializer = $serializer;\n        $this-\u0026gt;resourceMetadataFactory = $resourceMetadataFactory;\n    }\n\n    /**\n     * In an API context, converts any data to a XML response.\n     *\n     * @param GetResponseForControllerResultEvent $event\n     *\n     * @return Response|mixed\n     */\n    public function onKernelView(GetResponseForControllerResultEvent $event)\n    {\n        $controllerResult = $event-\u0026gt;getControllerResult();\n\n        if ($controllerResult instanceof Response) {\n            return $controllerResult;\n        }\n\n        $request = $event-\u0026gt;getRequest();\n\n        $format = $request-\u0026gt;attributes-\u0026gt;get(\u0026#39;_api_format\u0026#39;);\n        if (self::FORMAT !== $format) {\n            return $controllerResult;\n        }\n\n        switch ($request-\u0026gt;getMethod()) {\n            case Request::METHOD_POST:\n                $status = 201;\n                break;\n\n            case Request::METHOD_DELETE:\n                $status = 204;\n                break;\n\n            default:\n                $status = 200;\n                break;\n        }\n\n        $resourceClass = $request-\u0026gt;attributes-\u0026gt;get(\u0026#39;_resource_class\u0026#39;);\n        $resourceMetadata = $this-\u0026gt;resourceMetadataFactory-\u0026gt;create($resourceClass);\n        $context = $resourceMetadata-\u0026gt;getAttribute(\u0026#39;normalization_context\u0026#39;, []);\n\n        $response = new Response(\n            $this-\u0026gt;serializer-\u0026gt;serialize($controllerResult, self::FORMAT, $context),\n            $status,\n            [\u0026#39;Content-Type\u0026#39; =\u0026gt; \u0026#39;application/xml\u0026#39;]\n        );\n\n        $event-\u0026gt;setResponse($response);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe last step is to register the event listener on \u003ca href=\"http://symfony.com/doc/current/components/http_kernel/introduction.html#the-kernel-view-event\"\u003ethe \u003ccode\u003ekernel.view\u003c/code\u003e event\u003c/a\u003e\ndispatched by Symfony:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n    # ...\n\n    app.xml_responder_view_listener:\n        class:     \u0026#39;AppBundle\\EventListener\\XmlResponderViewListener\u0026#39;\n        arguments: [ \u0026#39;@api_platform.serializer\u0026#39;, \u0026#39;@api_platform.metadata.resource.metadata_factory\u0026#39; ]\n        tags:\n            - { name: \u0026#39;kernel.event_listener\u0026#39;, event: \u0026#39;kernel.view\u0026#39;, method: \u0026#39;onKernelView\u0026#39; }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"external-vocabularies.jsonld\"\u003eUsing external (JSON-LD) vocabularies\u003c/a\u003e\u003cbr/\u003e\nNext chapter: \u003ca href=\"security.jsonld\"\u003eSecurity\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"hamza","email":"hamza@oblady.fr"},{"@type":"Person","Name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2016-03-30T22:29:36+02:00","dateModified":"2016-06-08T23:45:03+02:00"}