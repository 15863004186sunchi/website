{"@id":"core/swagger.jsonld","@context":"http://schema.org","@type":"CreativeWork","name":"Swagger Support","text":"\u003ch1\u003eSwagger Support\u003c/h1\u003e\n\n\u003ch2\u003eOverride Swagger documentation\u003c/h2\u003e\n\n\u003cp\u003eSymfony allows to \u003ca href=\"https://symfony.com/doc/current/service_container/service_decoration.html\"\u003edecorate services\u003c/a\u003e, here we\nneed to decorate \u003ccode\u003eapi_platform.swagger.normalizer.documentation\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch3\u003eExample\u003c/h3\u003e\n\n\u003cp\u003eIn the following example, we will see how to override the title of the Swagger documentation and add a custom filter for\nthe \u003ccode\u003eGET\u003c/code\u003e operation of \u003ccode\u003e/foos\u003c/code\u003e path\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/services.yml\n\nservices:\n\n    # ...\n\n    \u0026#39;AppBundle\\Swagger\\SwaggerDecorator\u0026#39;:\n        decorates: \u0026#39;api_platform.swagger.normalizer.documentation\u0026#39;\n        arguments: [ \u0026#39;@AppBundle\\Swagger\\SwaggerDecorator.inner\u0026#39; ]\n        autoconfigure: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// src\\AppBundle\\Swagger\\SwaggerDecorator.php\n\nnamespace AppBundle\\Swagger;\n\nuse Symfony\\Component\\Serializer\\Normalizer\\NormalizerInterface;\n\nfinal class SwaggerDecorator implements NormalizerInterface\n{\n    private $decorated;\n\n    public function __construct(NormalizerInterface $decorated)\n    {\n        $this-\u0026gt;decorated = $decorated;\n    }\n\n    public function normalize($object, $format = null, array $context = [])\n    {\n        $docs = $this-\u0026gt;decorated-\u0026gt;normalize($object, $format, $context);\n\n        $customDefinition = [\n            \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;fields\u0026#39;,\n            \u0026#39;definition\u0026#39; =\u0026gt; \u0026#39;Fields to remove of the outpout\u0026#39;,\n            \u0026#39;default\u0026#39; =\u0026gt; \u0026#39;id\u0026#39;,\n            \u0026#39;in\u0026#39; =\u0026gt; \u0026#39;query\u0026#39;,\n        ];\n\n\t\t\n\t// e.g. add a custom parameter \n\t\t$docs[\u0026#39;paths\u0026#39;][\u0026#39;/foos\u0026#39;][\u0026#39;get\u0026#39;][\u0026#39;parameters\u0026#39;][] = $customDefinition;\n\t\t\n\t\t// Override title\n\t\t$docs[\u0026#39;info\u0026#39;][\u0026#39;title\u0026#39;] = \u0026#39;My Api Foo\u0026#39;;\n\t\t\t\n        return $docs;\n    }\n\n    public function supportsNormalization($data, $format = null)\n    {\n        return $this-\u0026gt;decorated-\u0026gt;supportsNormalization($data, $format);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eAdding Swagger Context\u003c/h2\u003e\n\n\u003cp\u003eSometimes you may want to have additional information included in your Swagger documentation. Follow these steps.\u003c/p\u003e\n\n\u003ch3\u003eProperties\u003c/h3\u003e\n\n\u003cp\u003eThe following configuration will provide additional context to your Swagger definitions:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n \n // src/AppBundle/Entity/Product.php\n \n namespace AppBundle\\Entity;\n \n use ApiPlatform\\Core\\Annotation\\ApiResource;\n use ApiPlatform\\Core\\Annotation\\ApiProperty;\n use Doctrine\\ORM\\Mapping as ORM;\n use Symfony\\Component\\Validator\\Constraints as Assert;\n \n /**\n  * @ApiResource\n  * @ORM\\Entity\n  */\n class Product // The class name will be used to name exposed resources\n {\n     /**\n      * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n      * @ORM\\Id\n      * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n      */\n     public $id;\n \n     /**\n      * @param string $name A name property - this description will be avaliable in the API documentation too.\n      *\n      * @ORM\\Column\n      * @Assert\\NotBlank\n      * \n      * @ApiProperty(\n      *     \u0026#34;attributes\u0026#34;={\n      *         \u0026#34;swagger_context\u0026#34;={\n      *             \u0026#34;type\u0026#34;=\u0026#34;string\u0026#34;,\n      *             \u0026#34;enum\u0026#34;={\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;},\n      *             \u0026#34;example\u0026#34;=\u0026#34;one\u0026#34;          \n      *         }\n      *     }\n      * )\n      */\n     public $name;\n     \n     /**\n      * @ORM\\Column\n      * @Assert\\DateTime\n      *\n      * @ApiProperty(\n      *     \u0026#34;attributes\u0026#34;={\n      *         \u0026#34;swagger_context\u0026#34;={\n      *             \u0026#34;type\u0026#34;=\u0026#34;string\u0026#34;,\n      *             \u0026#34;format\u0026#34;=\u0026#34;date-time\u0026#34;     \n      *         }\n      *     }\n      * ) \n      */\n     public $timestamp;\n }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eor in YAML:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eresources:\n    AppBundle\\Entity\\Product:\n      properties:\n        name:\n          attributes:\n            swagger_context:\n              type: string\n              enum: [\u0026#39;one\u0026#39;, \u0026#39;two\u0026#39;]\n              example: one\n        timestamp:\n          attributes:\n            swagger_context:\n              type: string\n              format: date-time\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eWill produce the following Swagger:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-json\"\u003e{\n  \u0026#34;swagger\u0026#34;: \u0026#34;2.0\u0026#34;,\n  \u0026#34;basePath\u0026#34;: \u0026#34;/\u0026#34;,\n  ...\n  \n  \u0026#34;definitions\u0026#34;: {\n    \u0026#34;Product\u0026#34;: {\n      \u0026#34;type\u0026#34;: \u0026#34;object\u0026#34;,\n      \u0026#34;description\u0026#34;: \u0026#34;This is a product.\u0026#34;,\n      \u0026#34;properties\u0026#34;: {\n        \u0026#34;id\u0026#34;: {\n          \u0026#34;type\u0026#34;: \u0026#34;integer\u0026#34;,\n          \u0026#34;readOnly\u0026#34;: true\n        },\n        \u0026#34;name\u0026#34;: {\n          \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\n          \u0026#34;description\u0026#34;: \u0026#34;This is a name.\u0026#34;,\n          \u0026#34;enum\u0026#34;: [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;],\n          \u0026#34;example\u0026#34;: \u0026#34;one\u0026#34;\n        },\n        \u0026#34;timestamp\u0026#34;: {\n          \u0026#34;type\u0026#34;: \u0026#34;string\u0026#34;,\n          \u0026#34;format\u0026#34;: \u0026#34;date-time\u0026#34;\n        }\n      }\n    }\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"angularjs-integration.jsonld\"\u003eAngularJS Integration\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"serialization.jsonld\"\u003eThe Serialization Process\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Michael Bos","email":"mab05k@gmail.com"},{"@type":"Person","name":"Sergey Ryabov","email":"sryabov@mhds.ru"},{"@type":"Person","name":"KÃ©vin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","name":"Tim","email":"tim.herlaud@gmail.com"}],"dateCreated":"2017-08-22T15:02:21+02:00","dateModified":"2017-10-30T00:30:01-07:00"}