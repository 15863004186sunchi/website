{"@id":"core/jwt.jsonld","@context":"http://schema.org","@type":"CreativeWork","name":"JWT Authentification","text":"\u003ch1\u003eJWT Authentification\u003c/h1\u003e\n\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://jwt.io/\"\u003eJSON Web Token (JWT)\u003c/a\u003e is a JSON-based open standard (\u003ca href=\"https://tools.ietf.org/html/rfc7519\"\u003eRFC 7519\u003c/a\u003e) for creating access tokens that assert some number of claims. For example, a server could generate a token that has the claim “logged in as admin” and provide that to a client. The client could then use that token to prove that he/she is logged in as admin. The tokens are signed by the server’s key, so the server is able to verify that the token is legitimate. The tokens are designed to be compact, URL-safe and usable especially in web browser single sign-on (SSO) context.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003ca href=\"https://en.wikipedia.org/wiki/JSON_Web_Token\"\u003eWikipedia\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eAPI Platform allows to easily add a JWT-based authentication to your API using \u003ca href=\"https://github.com/lexik/LexikJWTAuthenticationBundle\"\u003eLexikJWTAuthenticationBundle\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAPI Platform is fully working with \u003ca href=\"https://github.com/lexik/LexikJWTAuthenticationBundle\"\u003eLexikJWTAuthenticationBundle\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn order to install \u003ca href=\"https://github.com/lexik/LexikJWTAuthenticationBundle/blob/master/Resources/doc/index.md\"\u003ethe bundle please follow their documentation\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003eLexikJWTAuthenticationBundle\u003c/code\u003e requires your application to have a properly configured user provider. You can either use \u003ca href=\"fosuser-bundle\"\u003eAPI Platform’s FOSUserBundle integration\u003c/a\u003e or  \u003ca href=\"http://symfony.com/doc/current/security/custom_provider.html\"\u003ecreate a custom user provider\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere’s a sample configuration using the data provider provided by FOSUser:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yml\"\u003e# app/config/security.yml\n\nsecurity:\n    encoders:\n        FOS\\UserBundle\\Model\\UserInterface: bcrypt\n\n    role_hierarchy:\n        ROLE_READER: ROLE_USER\n        ROLE_ADMIN: ROLE_READER\n\n    providers:\n        fos_userbundle:\n            id: fos_user.user_provider.username\n            \n    firewalls:\n        login:\n            pattern:  ^/login\n            stateless: true\n            anonymous: true\n            provider: fos_userbundle\n            json_login:\n                check_path: /login_check\n                username_path: email\n                password_path: password\n                success_handler: lexik_jwt_authentication.handler.authentication_success\n                failure_handler: lexik_jwt_authentication.handler.authentication_failure\n\n        main:\n            pattern:   ^/\n            provider: fos_userbundle\n            stateless: true\n            anonymous: true\n            lexik_jwt: ~\n\n        dev:\n            pattern:  ^/(_(profiler|wdt)|css|images|js)/\n            security: false\n\n    access_control:\n        - { path: ^/login, role: IS_AUTHENTICATED_ANONYMOUSLY }\n        - { path: ^/books, roles: [ ROLE_READER ] }\n        - { path: ^/, roles: [ ROLE_READER ] }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eTesting with Behat\u003c/h2\u003e\n\n\u003cp\u003eLet’s configure Behat to automatically send a \u003ccode\u003eAuthorization\u003c/code\u003e HTTP header containing a valid JWT token when a scenario is marked with a \u003ccode\u003e@login\u003c/code\u003e annotation. Edit \u003ccode\u003efeatures/bootstrap/FeatureContext.php\u003c/code\u003e and add the following methods:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n// features/bootstrap/FeatureContext.php\n\nuse AppBundle\\Entity\\User;\nuse Behat\\Behat\\Hook\\Scope\\BeforeScenarioScope;\nuse Behatch\\Context\\RestContext;\n\nclass FeatureContext implements Context, SnippetAcceptingContext\n{\n    // ...\n    // Must be aster createDatabase() and dropDatabase() functions (the order matters)\n\n    /**\n     * @BeforeScenario\n     * @login\n     *\n     * @see https://symfony.com/doc/current/security/entity_provider.html#creating-your-first-user\n     */\n    public function login(BeforeScenarioScope $scope)\n    {\n        $user = new User();\n        $user-\u0026gt;setUsername(\u0026#39;admin\u0026#39;);\n        $user-\u0026gt;setPassword(\u0026#39;ATestPassword\u0026#39;);\n        $user-\u0026gt;setEmail(\u0026#39;test@test.com\u0026#39;);\n\n        $this-\u0026gt;manager-\u0026gt;persist($user);\n        $this-\u0026gt;manager-\u0026gt;flush();\n\n        $token = $this-\u0026gt;jwtManager-\u0026gt;create($user);\n\n        $this-\u0026gt;restContext = $scope-\u0026gt;getEnvironment()-\u0026gt;getContext(RestContext::class);\n        $this-\u0026gt;restContext-\u0026gt;iAddHeaderEqualTo(\u0026#39;Authorization\u0026#39;, \u0026#34;Bearer $token\u0026#34;);\n    }\n\n    /**\n     * @AfterScenario\n     * @logout\n     */\n    public function logout() {\n        $this-\u0026gt;restContext-\u0026gt;iAddHeaderEqualTo(\u0026#39;Authorization\u0026#39;, \u0026#39;\u0026#39;);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThen, update \u003ccode\u003ebehat.yml\u003c/code\u003e to inject the \u003ccode\u003elexik_jwt_authentication.jwt_manager\u003c/code\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# behat.yml\ndefault:\n  # ...\n  suites:\n    default:\n      contexts:\n        - FeatureContext: { doctrine: \u0026#39;@doctrine\u0026#39;, \u0026#39;jwtManager\u0026#39;: \u0026#39;@lexik_jwt_authentication.jwt_manager\u0026#39; }\n        - Behat\\MinkExtension\\Context\\MinkContext\n        - Behatch\\Context\\RestContext\n        - Behatch\\Context\\JsonContext\n  # ...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eFinally, mark your scenarios with the \u003ccode\u003e@login\u003c/code\u003e annotation to automatically add a valid \u003ccode\u003eAuthorization\u003c/code\u003e header and with \u003ccode\u003e@logout\u003c/code\u003e to be sure to detroy the token after this scerario.\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"fosuser-bundle.jsonld\"\u003eFOSUserBundle Integration\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"nelmio-api-doc.jsonld\"\u003eNelmioApiDocBundle integration\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Pierre","email":"pierre-H@users.noreply.github.com"},{"@type":"Person","name":"Nick Winfield","email":"pioneer@superhaggis.com"},{"@type":"Person","name":"Tomas","email":"norkunas.tom@gmail.com"},{"@type":"Person","name":"Clément Guillemain","email":"clement.guillemain@gmail.com"},{"@type":"Person","name":"Amrouche Hamza","email":"laharl.moon@gmail.com"}],"dateCreated":"2016-11-14T15:42:22+01:00","dateModified":"2017-09-27T10:44:10+02:00"}