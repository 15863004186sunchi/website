{"@context":"http://schema.org","@type":"CreativeWork","name":"Performance","text":"\u003ch1\u003ePerformance\u003c/h1\u003e\n\n\u003ch2\u003eEnabling the metadata cache\u003c/h2\u003e\n\n\u003cp\u003eComputing metadata used by the bundle is a costly operation. Fortunately, metadata can be computed once and then cached.\nAPI Platform internally uses a \u003ca href=\"http://www.php-fig.org/psr/psr-6/\"\u003ePSR-6\u003c/a\u003e cache. If the Symfony Cache Component is available\n(the default in the standard edition), it automatically enables the support for the best cache adapter available.\u003c/p\u003e\n\n\u003cp\u003eBest performance is achieved using \u003ca href=\"https://github.com/krakjoe/apcu\"\u003eAPCu\u003c/a\u003e. Be sure to have the APCu extesnion installed\non your production server, API Platform will automatically use it.\u003c/p\u003e\n\n\u003ch2\u003eUsing PPM (PHP-PM)\u003c/h2\u003e\n\n\u003cp\u003eResponse time of the API can be improved up to 15x by using \u003ca href=\"https://github.com/php-pm/php-pm\"\u003ePHP Process Manager\u003c/a\u003e. If\nyou want to use it on your project, follow the documentation dedicated to Symfony on the PPM website.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that PPM is still in an early stage of development and can cause issues in production.\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"external-vocabularies.jsonld\"\u003eUsing external (JSON-LD) vocabularies\u003c/a\u003e\u003cbr/\u003e\nNext chapter: \u003ca href=\"angular-integration.jsonld\"\u003eAngularJS Integration\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","Name":"KÃ©vin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2016-06-19T21:41:17+02:00","dateModified":"2016-06-19T21:41:17+02:00"}