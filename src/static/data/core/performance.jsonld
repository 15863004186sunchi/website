{"@context":"http://schema.org","@type":"CreativeWork","name":"Performance","text":"\u003ch1\u003ePerformance\u003c/h1\u003e\n\n\u003ch2\u003eEnabling the Builtin HTTP Cache Invalidation System\u003c/h2\u003e\n\n\u003cp\u003eExposing a hypermedia API has \u003ca href=\"http://blog.theamazingrando.com/in-band-vs-out-of-band.html\"\u003emany advantages\u003c/a\u003e. One of\nthem is the ability to know exactly which resources are included in HTTP responses created by the API. We used this\nspecificity to make API Platform apps blazing fast.\u003c/p\u003e\n\n\u003cp\u003eWhen the cache mechanism \u003ca href=\"configuration.jsonld\"\u003eis enabled\u003c/a\u003e, API Platform collects identifiers of every resources\nincluded in a given HTTP response (including lists, embedded documents and subresources) and returns them in a special\nHTTP header called \u003ca href=\"https://support.cloudflare.com/hc/en-us/articles/206596608-How-to-Purge-Cache-Using-Cache-Tags-Enterprise-only-\"\u003eCache-Tags\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Web_accelerator\"\u003ecache reverse proxy\u003c/a\u003e supporting cache tags (Varnish, CloudFlare,\nFastly…) must be put in front of the web server and store all responses returned by the API with a high\n\u003ca href=\"https://en.wikipedia.org/wiki/Time_to_live\"\u003eTTL\u003c/a\u003e. When a resource is modified, API Platform takes care of purging all\nresponses containing it in the proxy’s cache. It means that after the first request, all subsequent requests will not\ntouch the web server, and will be served instantly from the cache. It also means that the content served will always be\nfresh, because the cache is purged in real time.\u003c/p\u003e\n\n\u003cp\u003eThe support for most specific cases such as the invalidation of collections when a document is added or removed or for\nrelationships and inverse relations is built-in.\u003c/p\u003e\n\n\u003cp\u003eWe also included \u003ca href=\"https://varnish-cache.org/\"\u003eVarnish\u003c/a\u003e in the \u003ca href=\"../deployment/docker.jsonld\"\u003eDocker setup\u003c/a\u003e provided with the\ndistribution of API Platform, so this feature works out of the box.\u003c/p\u003e\n\n\u003cp\u003eIntegration with Varnish and the Doctrine ORM is shipped with the core library. You can easily implement the support for\nany other proxy or persistence system.\u003c/p\u003e\n\n\u003ch2\u003eEnabling the Metadata Cache\u003c/h2\u003e\n\n\u003cp\u003eComputing metadata used by the bundle is a costly operation. Fortunately, metadata can be computed once and then cached.\nAPI Platform internally uses a \u003ca href=\"http://www.php-fig.org/psr/psr-6/\"\u003ePSR-6\u003c/a\u003e cache. If the Symfony Cache Component is available\n(the default in the official distribution), it automatically enables the support for the best cache adapter available.\u003c/p\u003e\n\n\u003cp\u003eBest performance is achieved using \u003ca href=\"https://github.com/krakjoe/apcu\"\u003eAPCu\u003c/a\u003e. Be sure to have the APCu extension installed\non your production server, API Platform will automatically use it.\u003c/p\u003e\n\n\u003ch2\u003eUsing PPM (PHP-PM)\u003c/h2\u003e\n\n\u003cp\u003eResponse time of the API can be improved up to 15x by using \u003ca href=\"https://github.com/php-pm/php-pm\"\u003ePHP Process Manager\u003c/a\u003e. If\nyou want to use it on your project, follow the documentation dedicated to Symfony on the PPM website.\u003c/p\u003e\n\n\u003cp\u003eKeep in mind that PPM is still in an early stage of development and can cause issues in production.\u003c/p\u003e\n\n\u003ch2\u003eDoctrine Queries and Indexes\u003c/h2\u003e\n\n\u003ch3\u003eSearch Filter\u003c/h3\u003e\n\n\u003cp\u003eWhen using the \u003ccode\u003eSearchFilter\u003c/code\u003e and case insensivity, Doctrine will use the \u003ccode\u003eLOWER\u003c/code\u003e SQL function. Depending on your\ndriver, you may want to carefully index it by using a \u003ca href=\"http://use-the-index-luke.com/sql/where-clause/functions/case-insensitive-search\"\u003efunction-based\nindex\u003c/a\u003e or it will impact performance\nwith a huge collection. \u003ca href=\"http://use-the-index-luke.com/sql/where-clause/searching-for-ranges/like-performance-tuning\"\u003eHere are some examples to index LIKE\nfilters\u003c/a\u003e depending on your\ndatabase driver.\u003c/p\u003e\n\n\u003ch3\u003eEager loading\u003c/h3\u003e\n\n\u003cp\u003eBy default Doctrine comes with \u003ca href=\"http://doctrine-orm.readthedocs.io/en/latest/reference/working-with-objects.html#by-lazy-loading\"\u003elazy loading\u003c/a\u003e.\nUsually a killer time-saving feature and also a performance killer with large applications.\u003c/p\u003e\n\n\u003cp\u003eFortunately, Doctrine proposes another approach to remedy this problem: \u003ca href=\"http://doctrine-orm.readthedocs.io/en/latest/reference/working-with-objects.html#by-eager-loading\"\u003eeager loading\u003c/a\u003e.\nThis can easily be enabled for a relation: \u003ccode\u003e@ORM\\ManyToOne(fetch=\u0026#34;EAGER\u0026#34;)\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBy default in API Platform, we made the choice to force eager loading for all relations, with or without the Doctrine\n\u003ccode\u003efetch\u003c/code\u003e attribute. Thanks to the eager loading \u003ca href=\"extensions.jsonld\"\u003eextension\u003c/a\u003e. The \u003ccode\u003eEagerLoadingExtension\u003c/code\u003e will join every\nreadable association according to the serialization context. If you want to fetch an association that is not serializable\nyou’ve to bypass \u003ccode\u003ereadable\u003c/code\u003e and \u003ccode\u003ereadableLink\u003c/code\u003e by using the \u003ccode\u003efetchEager\u003c/code\u003e attribute on the property declaration, for example:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e/**\n * @ApiProperty(attributes={\u0026#34;fetchEager\u0026#34;: true})\n */\n public $foo;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eMax joins\u003c/h4\u003e\n\n\u003cp\u003eThere is a default restriction with this feature. We allow up to 30 joins per query. Beyond, an\n\u003ccode\u003eApiPlatform\\Core\\Exception\\RuntimeException\u003c/code\u003e exception will be thrown but this value can easily be increased with a\nlittle of configuration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yaml\n\napi_platform:\n\n    # ...\n\n    eager_loading:\n        max_joins: 100\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBe careful when you exceed this limit, it’s often caused by the result of a circular reference. \u003ca href=\"serialization-groups-and-relations.jsonld\"\u003eSerializer groups\u003c/a\u003e\ncan be a good solution to fix this issue.\u003c/p\u003e\n\n\u003ch4\u003eForce eager\u003c/h4\u003e\n\n\u003cp\u003eAs mentioned above, by default we force eager loading for all relations. This behaviour can be modified with the\nconfiguration in order to apply it only on join relations having the \u003ccode\u003eEAGER\u003c/code\u003e fetch mode:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yaml\n\napi_platform:\n\n    # ...\n\n    eager_loading:\n        force_eager: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch4\u003eOverride at resource and operation level\u003c/h4\u003e\n\n\u003cp\u003eWhen eager loading is enabled, whatever the status of the \u003ccode\u003eforce_eager\u003c/code\u003e parameter, you can easily override it directly\nfrom the configuration of each resource. You can do this at the resource level, at the operations level, or both:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Entity/Address.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ApiResource\n * @ORM\\Entity\n */\nclass Address\n{\n    // ...\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Entity/User.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ApiResource(attributes={\u0026#34;force_eager\u0026#34;=false})\n * @ORM\\Entity\n */\nclass User\n{\n    /**\n     * @var Address\n     *\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;Address\u0026#34;, fetch=\u0026#34;EAGER\u0026#34;)\n     */\n    public $address;\n\n    /**\n     * @var Group[]\n     *\n     * @ORM\\ManyToMany(targetEntity=\u0026#34;Group\u0026#34;, inversedBy=\u0026#34;users\u0026#34;)\n     * @ORM\\JoinTable(name=\u0026#34;users_groups\u0026#34;)\n     */\n    public $groups;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n// src/AppBundle/Entity/Group.php\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ApiResource(\n *     attributes={\u0026#34;force_eager\u0026#34;=false},\n *     itemOperations={\n *         \u0026#34;get\u0026#34;={\u0026#34;method\u0026#34;=\u0026#34;GET\u0026#34;, \u0026#34;force_eager\u0026#34;=true},\n *         \u0026#34;post\u0026#34;={\u0026#34;method\u0026#34;=\u0026#34;POST\u0026#34;}\n *     },\n *     collectionOperations={\n *         \u0026#34;get\u0026#34;={\u0026#34;method\u0026#34;=\u0026#34;GET\u0026#34;, \u0026#34;force_eager\u0026#34;=true},\n *         \u0026#34;post\u0026#34;={\u0026#34;method\u0026#34;=\u0026#34;POST\u0026#34;}\n *     }\n * )\n * @ORM\\Entity\n */\nclass Group\n{\n    /**\n     * @var User[]\n     *\n     * @ManyToMany(targetEntity=\u0026#34;User\u0026#34;, mappedBy=\u0026#34;groups\u0026#34;)\n     */\n    public $users;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eBe careful, the operation level is higher priority than the resource level but both are higher priority than the global\nconfiguration.\u003c/p\u003e\n\n\u003ch4\u003eDisable eager loading\u003c/h4\u003e\n\n\u003cp\u003eIf for any reason you don’t want the eager loading feature, you can turn it off in the configuration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/config.yaml\n\napi_platform:\n\n    # ...\n\n    eager_loading:\n        enabled: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe whole configuration seen before will no longer work and Doctrine will recover its default behavior.\u003c/p\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"security.jsonld\"\u003eSecurity\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"operation-path-naming.jsonld\"\u003eOperation Path Naming\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"Gildas NOEL","email":"g.noel@ackwa.fr"},{"@type":"Person","name":"Gildas NOEL","email":"g.noel@ackwa.fr"},{"@type":"Person","name":"Teoh Han Hui","email":"teohhanhui@gmail.com"},{"@type":"Person","name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","name":"Ener-Getick","email":"egetick@gmail.com"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"Antoine Bluchet","email":"soyuka@users.noreply.github.com"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"},{"@type":"Person","name":"Prou Yann","email":"yann@les-tilleuls.coop"},{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","name":"Thomas Kekeisen","email":"blaues0cke@users.noreply.github.com"},{"@type":"Person","name":"David Mézière","email":"dmeziere+github@gmail.com"},{"@type":"Person","name":"abluchet","email":"abluchet@ds-restauration.com"},{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2016-06-19T21:41:17+02:00","dateModified":"2017-09-11T17:42:21+02:00"}