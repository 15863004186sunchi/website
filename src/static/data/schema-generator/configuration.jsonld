{"@id":"schema-generator/configuration.jsonld","@context":"http://schema.org","@type":"CreativeWork","name":"Configuration","text":"\u003ch1\u003eConfiguration\u003c/h1\u003e\n\n\u003cp\u003eThe following options can be used in the configuration file.\u003c/p\u003e\n\n\u003ch2\u003eCustomizing PHP Namespaces\u003c/h2\u003e\n\n\u003cp\u003eNamespaces of generated PHP classes can be set globally, respectively for entities, enumerations and interfaces (if used\nwith Doctrine Resolve Target Entity Listener option).\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003enamespaces:\n    entity: \u0026#34;Dunglas\\EcommerceBundle\\Entity\u0026#34;\n    enum: \u0026#34;Dunglas\\EcommerceBundle\\Enum\u0026#34;\n    interface: \u0026#34;Dunglas\\EcommerceBundle\\Model\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNamespaces can also be specified for a specific type. It will take precedence over any globally configured namespace.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n    Thing:\n        namespaces:\n            class: \u0026#34;Dunglas\\CoreBundle\\Entity\u0026#34; # Namespace for the Thing entity (works for enumerations too)\n            interface: \u0026#34;Schema\\Model\u0026#34; # Namespace of the related interface\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a Field Range\u003c/h2\u003e\n\n\u003cp\u003eSchema.org allows a property to have several types. However, the generator allows only one type by property. If not configured,\nit will use the first defined type.\nThe \u003ccode\u003erange\u003c/code\u003e option is useful to set the type of a given property. It can also be used to force a type (even if not in the\nSchema.org definition).\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n    Brand:\n        properties:\n            logo: { range: \u0026#34;ImageObject\u0026#34; } # Force the range of the logo propery to ImageObject (can also be URL according to Schema.org)\n\n    PostalAddress:\n        properties:\n            addressCountry: { range: \u0026#34;Text\u0026#34; } # Force the type to Text instead of Country\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a Field Cardinality\u003c/h2\u003e\n\n\u003cp\u003eThe cardinality of a property is automatically guessed. The \u003ccode\u003ecardinality\u003c/code\u003e option allows to override the guessed value.\nSupported cardinalities are:\u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e(0..1)\u003c/code\u003e: scalar, not required\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(0..*)\u003c/code\u003e: array, not required\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(1..1)\u003c/code\u003e: scalar, required\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(1..*)\u003c/code\u003e: array, required\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eCardinalities are enforced by the class generator, the Doctrine ORM generator and the Symfony validation generator.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n    Product:\n        properties:\n            sku:\n                cardinality: \u0026#34;(0..1)\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a Relation Table Name\u003c/h2\u003e\n\n\u003cp\u003eThe relation table name between two entities is automatically guessed by Doctrine. The \u003ccode\u003erelationTableName\u003c/code\u003e option allows\nto override the default value.\u003c/p\u003e\n\n\u003cp\u003eThis is useful when you need two entities to have more than one relation.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    Organization:\n        properties:\n            contactPoint: { range: Person, relationTableName: organization_contactPoint }\n                member: { range: Person, cardinality: (1..*) } ## Will be default value : organization_person\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing (or Disabling) a Class Parent\u003c/h2\u003e\n\n\u003cp\u003eOverride the guessed class hierarchy of a given type with this option.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    ImageObject:\n        parent: Thing # Force the parent to be Thing instead of CreativeWork \u0026gt; MediaObject\n        properties: ~\n    Drug:\n        parent: false # No parent\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a Class to be Abstract\u003c/h2\u003e\n\n\u003cp\u003eForce a class to be \u003ccode\u003eabstract\u003c/code\u003e (or to be not).\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    Person:\n        abstract: true\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a Nullable Property\u003c/h2\u003e\n\n\u003cp\u003eForce a property to be \u003ccode\u003enullable\u003c/code\u003e (or to be not).\u003c/p\u003e\n\n\u003cp\u003eBy default this option is \u003ccode\u003etrue\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    Person:\n        properties:\n            name: { nullable: false }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe \u003ccode\u003e@Assert\\NotNull\u003c/code\u003e constrain is automatically added\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n/**\n * @var string The name of the item.\n *\n * @ORM\\Column\n * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n * @Assert\\NotNull\n */\n  private $name;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing a Unique Property\u003c/h2\u003e\n\n\u003cp\u003eForce a property to be \u003ccode\u003eunique\u003c/code\u003e (or to be not).\u003c/p\u003e\n\n\u003cp\u003eBy default this option is \u003ccode\u003efalse\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    Person:\n        properties:\n            email: { unique: true }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n...\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\n\n/**\n * A person (alive, dead, undead, or fictional).\n *\n * @see http://schema.org/Person Documentation on Schema.org\n *\n * @ORM\\Entity\n * @UniqueEntity(\u0026#34;email\u0026#34;)\n * @Iri(\u0026#34;http://schema.org/Person\u0026#34;)\n */\nclass Person\n{\n    /**\n     * @var string Email address.\n     *\n     * @ORM\\Column\n     * @Assert\\Email\n     */\n    private $email;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eMaking a Property Read Only\u003c/h2\u003e\n\n\u003cp\u003eA property can be marked read only with the following configuration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    Person:\n        properties:\n            email: { writable: false }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn such case, no mutator method will be generated.\u003c/p\u003e\n\n\u003ch2\u003eMaking a Property Write Only\u003c/h2\u003e\n\n\u003cp\u003eA property can be marked read only with the following configuration:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    Person:\n        properties:\n            email: { readable: false }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn this case, no getter method will be generated.\u003c/p\u003e\n\n\u003ch2\u003eForcing a Property to be in a Serialization Group\u003c/h2\u003e\n\n\u003cp\u003eForce a property to be in a \u003ccode\u003egroups\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eEnabling the \u003ccode\u003eSerializerGroupsAnnotationGenerator\u003c/code\u003e generator:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eannotationGenerators:\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\SerializerGroupsAnnotationGenerator\n  ...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThis option expects an array of scalar value \u003ccode\u003e{ groups: [ groups1, group2, ... ] }\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    Person:\n        properties:\n            name: { groups: [ public ] }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eOutput:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\n...\nuse Symfony\\Component\\Serializer\\Annotation\\Groups;\n\n/**\n * A person (alive, dead, undead, or fictional).\n *\n * @see http://schema.org/Person Documentation on Schema.org\n *\n * @ORM\\Entity\n * @Iri(\u0026#34;http://schema.org/Person\u0026#34;)\n */\nclass Person\n{\n    /**\n     * @var string The name of the item.\n     *\n     * @ORM\\Column(nullable=true)\n     * @Assert\\Type(type=\u0026#34;string\u0026#34;)\n     * @Iri(\u0026#34;https://schema.org/name\u0026#34;)\n     * @Groups({\u0026#34;public\u0026#34;})\n     */\n    private $name;\n\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing an Embeddable Class to be Embedded\u003c/h2\u003e\n\n\u003cp\u003eForce an \u003ccode\u003eembeddable\u003c/code\u003e class to be \u003ccode\u003eembedded\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e    GeoCoordinates:\n        embeddable: true\n    Place:\n        coordinates: { range: \u0026#34;GeoCoordinates\u0026#34;, embedded: true, columnPrefix: false }\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eAuthor PHPDoc\u003c/h2\u003e\n\n\u003cp\u003eAdd a \u003ccode\u003e@author\u003c/code\u003e PHPDoc annotation to classâ€™ DocBlock.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eauthor: \u0026#34;KÃ©vin Dunglas \u0026lt;kevin@les-tilleuls.coop\u0026gt;\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eDisabling Generators and Creating Custom Ones\u003c/h2\u003e\n\n\u003cp\u003eBy default, all generators except \u003ccode\u003eDunglasJsonLdApi\u003c/code\u003e (API Platform v1) and \u003ccode\u003eSerializerGroups\u003c/code\u003e are enabled.\nYou can specify the list of generators to use with the \u003ccode\u003eannotationGenerators\u003c/code\u003e option.\u003c/p\u003e\n\n\u003cp\u003eExample (enabling only the PHPDoc generator):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eannotationGenerators:\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou can write your generators by implementing the \u003ccode\u003eAnnotationGeneratorInterface\u003c/code\u003e.\nThe \u003ccode\u003eAbstractAnnotationGenerator\u003c/code\u003e provides helper methods\nuseful when creating your own generators.\u003c/p\u003e\n\n\u003cp\u003eEnabling a custom generator and the PHPDoc generator:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eannotationGenerators:\n    - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n    - Acme\\Generators\\MyGenerator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eSkipping Accessor Method Generation\u003c/h2\u003e\n\n\u003cp\u003eItâ€™s possible to skip the generation of accessor methods. This is particularly useful combined with the \u003ccode\u003evisibility: public\u003c/code\u003e\noption.\u003c/p\u003e\n\n\u003cp\u003eTo skip the generation of accessor methods, use the following config:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eaccessorMethods: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eItâ€™s possible to skip\u003c/p\u003e\n\n\u003ch2\u003eDisabling the \u003ccode\u003eid\u003c/code\u003e Generator\u003c/h2\u003e\n\n\u003cp\u003eBy default, the generator adds a property called \u003ccode\u003eid\u003c/code\u003e not provided by Schema.org.\nThis is useful when generating an entity for use with an ORM or an ODM but not when generating DTOs.\nThis behavior can be disabled with the following setting:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eid:\n  generate: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eGenerating UUIDs\u003c/h2\u003e\n\n\u003cp\u003eItâ€™s also possible to let the DBMS generate \u003ca href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\"\u003eUUIDs\u003c/a\u003e instead of autoincremented integers:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eid:\n  generationStrategy: uuid\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eUser submitted UUIDs\u003c/h2\u003e\n\n\u003cp\u003eTo set manually a UUID instead of letting the DBMS generating it, use the following config:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eid:\n  generationStrategy: uuid\n  writable: true\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eGenerating Custom IDs\u003c/h2\u003e\n\n\u003cp\u003eWith this configuration option, an \u003ccode\u003e$id\u003c/code\u003e property of type \u003ccode\u003estring\u003c/code\u003e and the corresponding getters and setters will be\ngenerated, but the DBMS will not generate anything, the ID must be set manually.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eid:\n  generationStrategy: none\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eDisabling Usage of Doctrine Collection\u003c/h2\u003e\n\n\u003cp\u003eBy default, the generator use classes provided by the \u003ca href=\"https://github.com/doctrine/collections\"\u003eDoctrine Collections\u003c/a\u003e library\nto store collections of entities. This is useful (and required) when using Doctrine ORM or Doctrine ODM.\nThis behavior can be disabled (to fallback to standard arrays) with the following setting:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003edoctrine:\n    useCollection: false\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eChanging the Field Visibility\u003c/h2\u003e\n\n\u003cp\u003eGenerated fields have a \u003ccode\u003eprivate\u003c/code\u003e visibility and are exposed through getters and setters.\nThe default visibility can be changed with the \u003ccode\u003efieldVisibility\u003c/code\u003e otion.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003efieldVisibility: \u0026#34;protected\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eGenerating \u003ccode\u003e@Assert\\Type\u003c/code\u003e Annotations\u003c/h2\u003e\n\n\u003cp\u003eItâ€™s possible to automatically generate Symfony validatorâ€™s \u003ccode\u003e@Assert\\Type\u003c/code\u003e annotations using the following config:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003evalidator:\n  assertType: true\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eForcing Doctrine Inheritance Mapping Annotation\u003c/h2\u003e\n\n\u003cp\u003eThe standard behavior of the generator is to use the \u003ccode\u003e@MappedSuperclass\u003c/code\u003e Doctrine annotation for classes with children and\n\u003ccode\u003e@Entity\u003c/code\u003e for classes with no child.\u003c/p\u003e\n\n\u003cp\u003eThe inheritance annotation can be forced for a given type like the following:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n    Product:\n        doctrine:\n            inheritanceMapping: \u0026#34;@MappedSuperclass\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cem\u003eThis setting is only relevant when using the Doctrine ORM generator.\u003c/em\u003e\u003c/p\u003e\n\n\u003ch2\u003eInterfaces and Doctrine Resolve Target Entity Listener\u003c/h2\u003e\n\n\u003cp\u003e\u003ca href=\"http://doctrine-orm.readthedocs.org/en/latest/cookbook/resolve-target-entity-listener.html\"\u003e\u003ccode\u003eResolveTargetEntityListener\u003c/code\u003e\u003c/a\u003e\nis a feature of Doctrine to keep modules independent. It allows to specify interfaces and \u003ccode\u003eabstract\u003c/code\u003e classes in relation\nmappings.\u003c/p\u003e\n\n\u003cp\u003eIf you set the option \u003ccode\u003euseInterface\u003c/code\u003e to true, the generator will generate an interface corresponding to each generated\nentity and will use them in relation mappings.\u003c/p\u003e\n\n\u003cp\u003eTo let PHP Schema generating the XML mapping file usable with Symfony add the following to your config file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003edoctrine:\n    resolveTargetEntityConfigPath: path/to/doctrine.xml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eCustom Schemas\u003c/h2\u003e\n\n\u003cp\u003eThe generator can use your own schema definitions. They must be wrote in RDFa and follow the format of the Schema.orgâ€™s\ndefinition. This is useful to document your \u003ca href=\"https://schema.org/docs/extension.html\"\u003eSchema.org extensions\u003c/a\u003e and use them\nto generate the PHP data model of your application.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003erdfa:\n    - https://raw.githubusercontent.com/rvguha/schemaorg/master/data/schema.rdfa # Experimental version of Schema.org\n    - http://example.com/data/myschema.rfa # Additional types\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eYou can also use any other vocabulary. Check the \u003ca href=\"https://lov.okfn.org/dataset/lov/\"\u003eLinked Open Vocabularies\u003c/a\u003e to find one fitting your needs.\u003c/p\u003e\n\n\u003cp\u003eFor instance, to generate a data model from the \u003ca href=\"http://purl.org/net/VideoGameOntology\"\u003eVideo Game Ontology\u003c/a\u003e, use the following config file:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003erdfa:\n  - http://vocab.linkeddata.es/vgo/GameOntologyv3.owl # The URL of the vocabulary definition\n\ntypes:\n  Session:\n    vocabularyNamespace: http://purl.org/net/VideoGameOntology#\n\n  # ...\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eChecking GoodRelation Compatibility\u003c/h2\u003e\n\n\u003cp\u003eIf the \u003ccode\u003echeckIsGoodRelations\u003c/code\u003e option is set to \u003ccode\u003etrue\u003c/code\u003e, the generator will emit a warning if an encountered property is not\npar of the \u003ca href=\"http://www.heppnetz.de/projects/goodrelations/\"\u003eGoodRelations\u003c/a\u003e schema.\u003c/p\u003e\n\n\u003cp\u003eThis is useful when generating e-commerce data model.\u003c/p\u003e\n\n\u003ch2\u003ePHP File Header\u003c/h2\u003e\n\n\u003cp\u003ePrepend all generated PHP files with a custom comment.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eheader: |\n    /*\n     * This file is part of the Ecommerce package.\n     *\n     * (c) KÃ©vin Dunglas \u0026lt;dunglas@gmail.com\u0026gt;\n     *\n     * For the full copyright and license information, please view the LICENSE\n     * file that was distributed with this source code.\n     */\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eFull Configuration Reference\u003c/h2\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003eonfig:\n\n    # RDFa files\n    rdfa:\n\n        # Prototype\n        -\n\n            # RDFa URI to use\n            uri:                  \u0026#39;https://schema.org/docs/schema_org_rdfa.html\u0026#39; # Example: https://schema.org/docs/schema_org_rdfa.html\n\n            # RDFa URI data format\n            format:               null # Example: rdfxml\n\n    # OWL relation files to use\n    relations:\n\n        # Default:\n        - https://purl.org/goodrelations/v1.owl\n\n    # Debug mode\n    debug:                false\n\n    # IDs configuration\n    id:\n\n        # Automatically add an id field to entities\n        generate:             true\n\n        # The ID generation strategy to use (\u0026#34;none\u0026#34; to not let the database generate IDs).\n        generationStrategy:   auto # One of \u0026#34;auto\u0026#34;; \u0026#34;none\u0026#34;; \u0026#34;uuid\u0026#34;; \u0026#34;mongoid\u0026#34;\n\n        # Is the ID writable? Only applicable if \u0026#34;generationStrategy\u0026#34; is \u0026#34;uuid\u0026#34;.\n        writable:             false\n\n    # Generate interfaces and use Doctrine\u0026#39;s Resolve Target Entity feature\n    useInterface:         false\n\n    # Emit a warning if a property is not derived from GoodRelations\n    checkIsGoodRelations: false\n\n    # A license or any text to use as header of generated files\n    header:               false # Example: // (c) KÃ©vin Dunglas \u0026lt;dunglas@gmail.com\u0026gt;\n\n    # PHP namespaces\n    namespaces:\n\n        # The namespace of the generated entities\n        entity:               AppBundle\\Entity # Example: Acme\\Entity\n\n        # The namespace of the generated enumerations\n        enum:                 AppBundle\\Enum # Example: Acme\\Enum\n\n        # The namespace of the generated interfaces\n        interface:            AppBundle\\Model # Example: Acme\\Model\n\n    # Doctrine\n    doctrine:\n\n        # Use Doctrine\u0026#39;s ArrayCollection instead of standard arrays\n        useCollection:        true\n\n        # The Resolve Target Entity Listener config file pass\n        resolveTargetEntityConfigPath: null\n\n    # Symfony Validator Component\n    validator:\n\n        # Generate @Assert\\Type annotation\n        assertType:           false\n\n    # The value of the phpDoc\u0026#39;s @author annotation\n    author:               false # Example: KÃ©vin Dunglas \u0026lt;dunglas@gmail.com\u0026gt;\n\n    # Visibility of entities fields\n    fieldVisibility:      private # One of \u0026#34;private\u0026#34;; \u0026#34;protected\u0026#34;; \u0026#34;public\u0026#34;\n\n    # Set this flag to false to not generate getter, setter, adder and remover methods\n    accessorMethods:      true\n\n    # Set this flag to true to generate fluent setter, adder and remover methods\n    fluentMutatorMethods: false\n\n    # Schema.org\u0026#39;s types to use\n    types:\n\n        # Prototype\n        id:\n\n            # Namespace of the vocabulary the type belongs to.\n            vocabularyNamespace:  \u0026#39;http://schema.org/\u0026#39;\n\n            # Is the class abstract? (null to guess)\n            abstract:             null\n\n            # Is the class embeddable?\n            embeddable:           false\n\n            # Type namespaces\n            namespaces:\n\n                # The namespace for the generated class (override any other defined namespace)\n                class:                null\n\n                # The namespace for the generated interface (override any other defined namespace)\n                interface:            null\n            doctrine:\n\n                # The Doctrine inheritance mapping type (override the guessed one)\n                inheritanceMapping:   null\n\n            # The parent class, set to false for a top level class\n            parent:               false\n\n            # If declaring a custom class, this will be the class from which properties type will be guessed\n            guessFrom:            Thing\n\n            # Import all existing properties\n            allProperties:        false\n\n            # Properties of this type to use\n            properties:\n\n                # Prototype\n                id:\n\n                    # The property range\n                    range:                null # Example: Offer\n\n                    # The relation table name\n                    relationTableName:    null # Example: organization_member\n                    cardinality:          unknown # One of \u0026#34;(0..1)\u0026#34;; \u0026#34;(0..*)\u0026#34;; \u0026#34;(1..1)\u0026#34;; \u0026#34;(1..*)\u0026#34;; \u0026#34;(*..0)\u0026#34;; \u0026#34;(*..1)\u0026#34;; \u0026#34;(*..*)\u0026#34;; \u0026#34;unknown\u0026#34;\n\n                    # The doctrine column annotation content\n                    ormColumn:            null # Example: type=\u0026#34;decimal\u0026#34;, precision=5, scale=1, options={\u0026#34;comment\u0026#34; = \u0026#34;my comment\u0026#34;}\n\n                    # Symfony Serialization Groups\n                    groups:               []\n\n                    # Is the property readable?\n                    readable:             true\n\n                    # Is the property writable?\n                    writable:             true\n\n                    # Is the property nullable?\n                    nullable:             true\n\n                    # The property unique\n                    unique:               false\n\n                    # Is the property embedded?\n                    embedded:             false\n\n                    # The property columnPrefix\n                    columnPrefix:         false\n\n    # Annotation generators to use\n    annotationGenerators:\n\n        # Defaults:\n        - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\PhpDocAnnotationGenerator\n        - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\DoctrineOrmAnnotationGenerator\n        - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\ApiPlatformCoreAnnotationGenerator\n        - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\ConstraintAnnotationGenerator\n        - ApiPlatform\\SchemaGenerator\\AnnotationGenerator\\SerializerGroupsAnnotationGenerator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"getting-started.jsonld\"\u003eGetting Started\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"../admin/index.jsonld\"\u003eThe Admin Component: Introduction\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"Allan Stepps","email":"LilSilk@gmail.com"},{"@type":"Person","name":"Laury Sorriaux","email":"laury@les-tilleuls.coop"},{"@type":"Person","name":"Johnny Peck","email":"johnnypeck@users.noreply.github.com"},{"@type":"Person","name":"Prou Yann","email":"yann@les-tilleuls.coop"},{"@type":"Person","name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","name":"JDruery","email":"j.druery@gmail.com"},{"@type":"Person","name":"JhonnyL","email":"jhonny.lidfors@chas.se"},{"@type":"Person","name":"Gu3","email":"vincent.guffon@gmail.com"},{"@type":"Person","name":"Youssef El Montaser","email":"yelmontaser@users.noreply.github.com"},{"@type":"Person","name":"Stepan Anchugov","email":"kixxx1@gmail.com"},{"@type":"Person","name":"KÃ©vin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2015-09-04T12:59:28+02:00","dateModified":"2017-09-30T10:44:32+02:00"}