{"@id":"schema-generator/getting-started.jsonld","@context":"http://schema.org","@type":"CreativeWork","name":"Getting Started","text":"\u003ch1\u003eGetting Started\u003c/h1\u003e\n\n\u003ch2\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eIf you use \u003ca href=\"../distribution/index.jsonld\"\u003ethe official distribution of API Platform\u003c/a\u003e, the Schema Generator is already installed as a development dependency of your project and can be invoked through Docker:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ docker-compose exec app vendor/bin/schema\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe Schema Generator can also \u003ca href=\"https://github.com/api-platform/schema-generator/releases\"\u003ebe downloaded independently as a PHAR\u003c/a\u003e or installed in an existing project using \u003ca href=\"https://getcomposer.org\"\u003eComposer\u003c/a\u003e:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ composer require --dev api-platform/schema-generator\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch2\u003eModel scaffolding\u003c/h2\u003e\n\n\u003cp\u003eStart by browsing \u003ca href=\"https://schema.org\"\u003eSchema.org\u003c/a\u003e and pick types applicable to your application. The website provides\ntons of schemas including (but not limited to) representations of people, organization, event, postal address, creative\nwork and e-commerce structures.\nThen, write a simple YAML config file like the following (here we will generate a data model for an address book):\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003e# app/config/schema.yml\n\n# The list of types and properties we want to use\ntypes:\n    # Parent class of Person\n    Thing:\n        properties:\n            name: ~\n    Person:\n        properties:\n            familyName: ~\n            givenName: ~\n            additionalName: ~\n            gender: ~\n            address: ~\n            birthDate: ~\n            telephone: ~\n            email: ~\n            url: ~\n            jobTitle: ~\n    PostalAddress:\n        # Disable the generation of the class hierarchy for this type\n        parent: false\n        properties:\n            # Force the type of the addressCountry property to text\n            addressCountry: { range: \u0026#34;Text\u0026#34; }\n            addressLocality: ~\n            addressRegion: ~\n            postOfficeBoxNumber: ~\n            postalCode: ~\n            streetAddress: ~\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eRun the generator with this config file as parameter:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ vendor/bin/schema generate-types src/ app/config/schema.yml\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe following classes will be generated:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003etypes:\n    Person:\n        properties:\n            name: ~\n            familyName: ~\n            givenName: ~\n            additionalName: ~\n            gender: ~\n            address: ~\n            birthDate: ~\n            telephone: ~\n            email: ~\n            url: ~\n            jobTitle: ~\n    PostalAddress:\n        properties:\n            # Force the type of the addressCountry property to text\n            addressCountry: { range: \u0026#34;Text\u0026#34; }\n            addressLocality: ~\n            addressRegion: ~\n            postOfficeBoxNumber: ~\n            postalCode: ~\n            streetAddress: ~\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\ndeclare(strict_types=1);\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiProperty;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * A person (alive, dead, undead, or fictional).\n *\n * @see http://schema.org/Person Documentation on Schema.org\n *\n * @ORM\\Entity\n * @ApiResource(iri=\u0026#34;http://schema.org/Person\u0026#34;)\n */\nclass Person\n{\n    /**\n     * @var int|null\n     *\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     */\n    private $id;\n\n    /**\n     * @var string|null the name of the item\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/name\u0026#34;)\n     */\n    private $name;\n\n    /**\n     * @var string|null Family name. In the U.S., the last name of an Person. This can be used along with givenName instead of the name property.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/familyName\u0026#34;)\n     */\n    private $familyName;\n\n    /**\n     * @var string|null Given name. In the U.S., the first name of a Person. This can be used along with familyName instead of the name property.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/givenName\u0026#34;)\n     */\n    private $givenName;\n\n    /**\n     * @var string|null an additional name for a Person, can be used for a middle name\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/additionalName\u0026#34;)\n     */\n    private $additionalName;\n\n    /**\n     * @var string|null Gender of the person. While http://schema.org/Male and http://schema.org/Female may be used, text strings are also acceptable for people who do not identify as a binary gender.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/gender\u0026#34;)\n     */\n    private $gender;\n\n    /**\n     * @var PostalAddress|null physical address of the item\n     *\n     * @ORM\\ManyToOne(targetEntity=\u0026#34;AppBundle\\Entity\\PostalAddress\u0026#34;)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/address\u0026#34;)\n     */\n    private $address;\n\n    /**\n     * @var \\DateTimeInterface|null date of birth\n     *\n     * @ORM\\Column(type=\u0026#34;date\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/birthDate\u0026#34;)\n     * @Assert\\Date\n     */\n    private $birthDate;\n\n    /**\n     * @var string|null the telephone number\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/telephone\u0026#34;)\n     */\n    private $telephone;\n\n    /**\n     * @var string|null email address\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/email\u0026#34;)\n     * @Assert\\Email\n     */\n    private $email;\n\n    /**\n     * @var string|null URL of the item\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/url\u0026#34;)\n     * @Assert\\Url\n     */\n    private $url;\n\n    /**\n     * @var string|null the job title of the person (for example, Financial Manager)\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/jobTitle\u0026#34;)\n     */\n    private $jobTitle;\n\n    public function getId(): ?int\n    {\n        return $this-\u0026gt;id;\n    }\n\n    public function setName(?string $name): void\n    {\n        $this-\u0026gt;name = $name;\n    }\n\n    public function getName(): ?string\n    {\n        return $this-\u0026gt;name;\n    }\n\n    public function setFamilyName(?string $familyName): void\n    {\n        $this-\u0026gt;familyName = $familyName;\n    }\n\n    public function getFamilyName(): ?string\n    {\n        return $this-\u0026gt;familyName;\n    }\n\n    public function setGivenName(?string $givenName): void\n    {\n        $this-\u0026gt;givenName = $givenName;\n    }\n\n    public function getGivenName(): ?string\n    {\n        return $this-\u0026gt;givenName;\n    }\n\n    public function setAdditionalName(?string $additionalName): void\n    {\n        $this-\u0026gt;additionalName = $additionalName;\n    }\n\n    public function getAdditionalName(): ?string\n    {\n        return $this-\u0026gt;additionalName;\n    }\n\n    public function setGender(?string $gender): void\n    {\n        $this-\u0026gt;gender = $gender;\n    }\n\n    public function getGender(): ?string\n    {\n        return $this-\u0026gt;gender;\n    }\n\n    public function setAddress(?PostalAddress $address): void\n    {\n        $this-\u0026gt;address = $address;\n    }\n\n    public function getAddress(): ?PostalAddress\n    {\n        return $this-\u0026gt;address;\n    }\n\n    public function setBirthDate(?\\DateTimeInterface $birthDate): void\n    {\n        $this-\u0026gt;birthDate = $birthDate;\n    }\n\n    public function getBirthDate(): ?\\DateTimeInterface\n    {\n        return $this-\u0026gt;birthDate;\n    }\n\n    public function setTelephone(?string $telephone): void\n    {\n        $this-\u0026gt;telephone = $telephone;\n    }\n\n    public function getTelephone(): ?string\n    {\n        return $this-\u0026gt;telephone;\n    }\n\n    public function setEmail(?string $email): void\n    {\n        $this-\u0026gt;email = $email;\n    }\n\n    public function getEmail(): ?string\n    {\n        return $this-\u0026gt;email;\n    }\n\n    public function setUrl(?string $url): void\n    {\n        $this-\u0026gt;url = $url;\n    }\n\n    public function getUrl(): ?string\n    {\n        return $this-\u0026gt;url;\n    }\n\n    public function setJobTitle(?string $jobTitle): void\n    {\n        $this-\u0026gt;jobTitle = $jobTitle;\n    }\n\n    public function getJobTitle(): ?string\n    {\n        return $this-\u0026gt;jobTitle;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\ndeclare(strict_types=1);\n\nnamespace AppBundle\\Entity;\n\nuse ApiPlatform\\Core\\Annotation\\ApiProperty;\nuse ApiPlatform\\Core\\Annotation\\ApiResource;\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * The mailing address.\n *\n * @see http://schema.org/PostalAddress Documentation on Schema.org\n *\n * @ORM\\Entity\n * @ApiResource(iri=\u0026#34;http://schema.org/PostalAddress\u0026#34;)\n */\nclass PostalAddress\n{\n    /**\n     * @var int|null\n     *\n     * @ORM\\Id\n     * @ORM\\GeneratedValue(strategy=\u0026#34;AUTO\u0026#34;)\n     * @ORM\\Column(type=\u0026#34;integer\u0026#34;)\n     */\n    private $id;\n\n    /**\n     * @var string|null The country. For example, USA. You can also provide the two-letter \\[ISO 3166-1 alpha-2 country code\\](http://en.wikipedia.org/wiki/ISO\\_3166-1).\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/addressCountry\u0026#34;)\n     */\n    private $addressCountry;\n\n    /**\n     * @var string|null The locality. For example, Mountain View.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/addressLocality\u0026#34;)\n     */\n    private $addressLocality;\n\n    /**\n     * @var string|null The region. For example, CA.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/addressRegion\u0026#34;)\n     */\n    private $addressRegion;\n\n    /**\n     * @var string|null the post office box number for PO box addresses\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/postOfficeBoxNumber\u0026#34;)\n     */\n    private $postOfficeBoxNumber;\n\n    /**\n     * @var string|null The postal code. For example, 94043.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/postalCode\u0026#34;)\n     */\n    private $postalCode;\n\n    /**\n     * @var string|null The street address. For example, 1600 Amphitheatre Pkwy.\n     *\n     * @ORM\\Column(type=\u0026#34;text\u0026#34;, nullable=true)\n     * @ApiProperty(iri=\u0026#34;http://schema.org/streetAddress\u0026#34;)\n     */\n    private $streetAddress;\n\n    public function getId(): ?int\n    {\n        return $this-\u0026gt;id;\n    }\n\n    public function setAddressCountry(?string $addressCountry): void\n    {\n        $this-\u0026gt;addressCountry = $addressCountry;\n    }\n\n    public function getAddressCountry(): ?string\n    {\n        return $this-\u0026gt;addressCountry;\n    }\n\n    public function setAddressLocality(?string $addressLocality): void\n    {\n        $this-\u0026gt;addressLocality = $addressLocality;\n    }\n\n    public function getAddressLocality(): ?string\n    {\n        return $this-\u0026gt;addressLocality;\n    }\n\n    public function setAddressRegion(?string $addressRegion): void\n    {\n        $this-\u0026gt;addressRegion = $addressRegion;\n    }\n\n    public function getAddressRegion(): ?string\n    {\n        return $this-\u0026gt;addressRegion;\n    }\n\n    public function setPostOfficeBoxNumber(?string $postOfficeBoxNumber): void\n    {\n        $this-\u0026gt;postOfficeBoxNumber = $postOfficeBoxNumber;\n    }\n\n    public function getPostOfficeBoxNumber(): ?string\n    {\n        return $this-\u0026gt;postOfficeBoxNumber;\n    }\n\n    public function setPostalCode(?string $postalCode): void\n    {\n        $this-\u0026gt;postalCode = $postalCode;\n    }\n\n    public function getPostalCode(): ?string\n    {\n        return $this-\u0026gt;postalCode;\n    }\n\n    public function setStreetAddress(?string $streetAddress): void\n    {\n        $this-\u0026gt;streetAddress = $streetAddress;\n    }\n\n    public function getStreetAddress(): ?string\n    {\n        return $this-\u0026gt;streetAddress;\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eNote that the generator takes care of creating directories corresponding to the namespace structure.\u003c/p\u003e\n\n\u003cp\u003eWithout configuration file, the tool will build the entire Schema.org vocabulary. If no properties are specified for a given\ntype, all its properties will be generated.\u003c/p\u003e\n\n\u003cp\u003eThe generator also supports enumerations generation. For subclasses of \u003ca href=\"https://schema.org/Enumeration\"\u003e\u003ccode\u003eEnumeration\u003c/code\u003e\u003c/a\u003e, the\ngenerator will automatically create a class extending the Enum type provided by \u003ca href=\"https://github.com/myclabs/php-enum\"\u003emyclabs/php-enum\u003c/a\u003e.\nDon’t forget to install this library in your project. Refer you to PHP Enum documentation to see how to use it. The Symfony\nvalidation annotation generator automatically takes care of enumerations to validate choices values.\u003c/p\u003e\n\n\u003cp\u003eA config file generating an enum class:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-yaml\"\u003etypes:\n    OfferItemCondition: ~ # The generator will automatically guess that OfferItemCondition is subclass of Enum\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eThe related PHP class:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode class=\"language-php\"\u003e\u0026lt;?php\n\ndeclare(strict_types=1);\n\nnamespace AppBundle\\Enum;\n\nuse MyCLabs\\Enum\\Enum;\n\n/**\n * A list of possible conditions for the item.\n *\n * @see http://schema.org/OfferItemCondition Documentation on Schema.org\n */\nclass OfferItemCondition extends Enum\n{\n    /**\n     * @var string DamagedCondition\n     */\n    const DAMAGED_CONDITION = \u0026#39;http://schema.org/DamagedCondition\u0026#39;;\n    /**\n     * @var string NewCondition\n     */\n    const NEW_CONDITION = \u0026#39;http://schema.org/NewCondition\u0026#39;;\n    /**\n     * @var string RefurbishedCondition\n     */\n    const REFURBISHED_CONDITION = \u0026#39;http://schema.org/RefurbishedCondition\u0026#39;;\n    /**\n     * @var string UsedCondition\n     */\n    const USED_CONDITION = \u0026#39;http://schema.org/UsedCondition\u0026#39;;\n}\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003ch3\u003eGoing further\u003c/h3\u003e\n\n\u003cul\u003e\n\u003cli\u003eBrowse \u003ca href=\"configuration.jsonld\"\u003ethe configuration documentation\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch2\u003eCardinality extraction\u003c/h2\u003e\n\n\u003cp\u003eThe Cardinality Extractor is a standalone tool (also used internally by the generator) extracting a property’s cardinality.\nIt uses \u003ca href=\"http://www.heppnetz.de/projects/goodrelations/\"\u003eGoodRelations\u003c/a\u003e data when available. Other cardinalities are\nguessed using the property’s comment.\nWhen cardinality cannot be automatically extracted, it’s value is set to \u003ccode\u003eunknown\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eUsage:\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e$ vendor/bin/schema extract-cardinalities\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003ePrevious chapter: \u003ca href=\"index.jsonld\"\u003eIntroduction\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eNext chapter: \u003ca href=\"configuration.jsonld\"\u003eConfiguration\u003c/a\u003e\u003c/p\u003e\n","author":[{"@type":"Person","name":"meyerbaptiste","email":"baptiste@les-tilleuls.coop"},{"@type":"Person","name":"Teoh Han Hui","email":"teohhanhui@gmail.com"},{"@type":"Person","name":"Anael CHARDAN","email":"anael.chardan@gmail.com"},{"@type":"Person","name":"Prou Yann","email":"yann@les-tilleuls.coop"},{"@type":"Person","name":"Kevin Saliou","email":"kevin@saliou.name"},{"@type":"Person","name":"Stepan Anchugov","email":"kixxx1@gmail.com"},{"@type":"Person","name":"Kévin Dunglas","email":"dunglas@gmail.com"}],"dateCreated":"2015-09-04T12:59:28+02:00","dateModified":"2017-09-08T11:38:53+02:00"}